//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using YumaPos.Server.Infrastructure.Repositories;
using YumaPos.Server.Data.Sql;



namespace TestRepositoryGeneration
{
	public partial class RecipieItemRepository : RepositoryBase, IRecipieItemRepository
	{
		private const string Fields = "[RecipieItems].[ItemId],[RecipieItems].[ItemVersionId],[RecipieItems].[IsDeleted],[RecipieItems].[CategoryId]{columns}";
		private const string Values = "@ItemId,@ItemVersionId,@IsDeleted,@CategoryId{values}";
		private const string SelectAllQuery = "SELECT [RecipieItems].[ItemId],[RecipieItems].[ItemVersionId],[RecipieItems].[IsDeleted],[RecipieItems].[CategoryId] FROM [RecipieItems]  {whereTenantId:[RecipieItems]} ";
		private const string SelectByQuery = "SELECT [RecipieItems].[ItemId],[RecipieItems].[ItemVersionId],[RecipieItems].[IsDeleted],[RecipieItems].[CategoryId] FROM [RecipieItems] ";
		private const string InsertQuery = "INSERT INTO RecipieItems([RecipieItems].[ItemId],[RecipieItems].[ItemVersionId],[RecipieItems].[IsDeleted],[RecipieItems].[CategoryId]{columns}) OUTPUT INSERTED.ItemId VALUES(@ItemId,@ItemVersionId,@IsDeleted,@CategoryId{values}) ";
		private const string UpdateQueryBy = "UPDATE [RecipieItems] SET RecipieItems.[ItemId] = @ItemId,RecipieItems.[ItemVersionId] = @ItemVersionId,RecipieItems.[IsDeleted] = @IsDeleted,RecipieItems.[CategoryId] = @CategoryId FROM [RecipieItems] ";
		private const string DeleteQueryBy = "DELETE FROM [RecipieItems] ";
		private const string SelectIntoTempTable = "DECLARE @Temp TABLE (ItemId uniqueidentifier);INSERT INTO @Temp SELECT [RecipieItems].[ItemId] FROM [RecipieItems] ";
		private const string WhereQueryByItemId = "WHERE RecipieItems.[ItemId] = @ItemId{andTenantId:[RecipieItems]} ";
		private const string AndWithFilterData = "AND RecipieItems.[IsDeleted] = @IsDeleted";


		public RecipieItemRepository(YumaPos.FrontEnd.Infrastructure.Configuration.IDataAccessService dataAccessService) : base(dataAccessService) { }
		public IEnumerable<YumaPos.Server.Infrastructure.DataObjects.RecipieItem> GetAll(bool? isDeleted = false)
		{
			object parameters = new { isDeleted };
			var sql = SelectAllQuery;
			if (isDeleted.HasValue)
			{
				sql = sql + AndWithFilterData;
			}
			var result = DataAccessService.Get<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>(sql, parameters).ToList();
			return result.ToList();
		}
		public async Task<IEnumerable<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>> GetAllAsync(bool? isDeleted = false)
		{
			object parameters = new { isDeleted };
			var sql = SelectAllQuery;
			if (isDeleted.HasValue)
			{
				sql = sql + AndWithFilterData;
			}
			var result = (await DataAccessService.GetAsync<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>(sql, parameters));
			return result.ToList();
		}

		public YumaPos.Server.Infrastructure.DataObjects.RecipieItem GetByItemId(Guid itemId, bool? isDeleted = false)
		{
			object parameters = new { itemId, isDeleted };
			var sql = SelectByQuery + WhereQueryByItemId;
			if (isDeleted.HasValue)
			{
				sql = sql + AndWithFilterData;
			}
			var result = DataAccessService.Get<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>(sql, parameters);
			return result.FirstOrDefault();
		}
		public async Task<YumaPos.Server.Infrastructure.DataObjects.RecipieItem> GetByItemIdAsync(Guid itemId, bool? isDeleted = false)
		{
			object parameters = new { itemId, isDeleted };
			var sql = SelectByQuery + WhereQueryByItemId;
			if (isDeleted.HasValue)
			{
				sql = sql + AndWithFilterData;
			}
			var result = (await DataAccessService.GetAsync<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>(sql, parameters));
			return result.FirstOrDefault();
		}


		public Guid Insert(YumaPos.Server.Infrastructure.DataObjects.RecipieItem recipieItem)
		{
			var res = DataAccessService.InsertObject(recipieItem, InsertQuery);
			return (Guid)res;
		}
		public async Task<Guid> InsertAsync(YumaPos.Server.Infrastructure.DataObjects.RecipieItem recipieItem)
		{
			var res = await DataAccessService.InsertObjectAsync(recipieItem, InsertQuery);
			return (Guid)res;
		}

		/*
		public void UpdateByItemId(YumaPos.Server.Infrastructure.DataObjects.RecipieItem recipieItem)
		{
		var sql = UpdateQueryBy + WhereQueryByItemId; 
		DataAccessService.PersistObject(recipieItem, sql);
		}
		public async Task UpdateByItemIdAsync(YumaPos.Server.Infrastructure.DataObjects.RecipieItem recipieItem)
		{
		var sql = UpdateQueryBy + WhereQueryByItemId; 
		await DataAccessService.PersistObjectAsync(recipieItem, sql);
		}


		*/
		/*
		public void RemoveByItemId(YumaPos.Server.Infrastructure.DataObjects.RecipieItem recipieItem)
		{
		var sql = DeleteQueryBy + WhereQueryByItemId; 
		DataAccessService.PersistObject(recipieItem, sql);
		}
		public async Task RemoveByItemIdAsync(YumaPos.Server.Infrastructure.DataObjects.RecipieItem recipieItem)
		{
		var sql = DeleteQueryBy + WhereQueryByItemId; 
		await DataAccessService.PersistObjectAsync(recipieItem, sql);
		}

		public void RemoveByItemId(Guid itemId)
		{
		object parameters = new {itemId};
		var sql = DeleteQueryBy + WhereQueryByItemId; 
		DataAccessService.PersistObject<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>(sql, parameters);
		}
		public async Task RemoveByItemIdAsync(Guid itemId)
		{
		object parameters = new {itemId};
		var sql = DeleteQueryBy + WhereQueryByItemId; 
		await DataAccessService.PersistObjectAsync<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>(sql, parameters);
		}


		*/

	}
}
