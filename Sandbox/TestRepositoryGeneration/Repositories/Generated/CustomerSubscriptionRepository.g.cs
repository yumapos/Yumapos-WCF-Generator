//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using YumaPos.Server.Infrastructure.Repositories;
using YumaPos.Server.Data.Sql;



namespace YumaPos.Server.Data.Sql.Settings
{
	public partial class CustomerSubscriptionRepository : RepositoryBase, ICustomerSubscriptionRepository
	{
		private const string Fields = @"[CustomerSubscriptions].[CustomerId],[CustomerSubscriptions].[CustomerNotificationsType],[CustomerSubscriptions].[Email],[CustomerSubscriptions].[SMS],[CustomerSubscriptions].[Push],[CustomerSubscriptions].[IsCustomizable],[CustomerSubscriptions].[ResendPeriod]{columns}";
		private const string Values = @"@CustomerId,@CustomerNotificationsType,@Email,@SMS,@Push,@IsCustomizable,@ResendPeriod{values}";
		private const string SelectAllQuery = @"SELECT [CustomerSubscriptions].[CustomerId],[CustomerSubscriptions].[CustomerNotificationsType],[CustomerSubscriptions].[Email],[CustomerSubscriptions].[SMS],[CustomerSubscriptions].[Push],[CustomerSubscriptions].[IsCustomizable],[CustomerSubscriptions].[ResendPeriod] FROM [CustomerSubscriptions]  {whereTenantId:[CustomerSubscriptions]} ";
		private const string SelectByQuery = @"SELECT [CustomerSubscriptions].[CustomerId],[CustomerSubscriptions].[CustomerNotificationsType],[CustomerSubscriptions].[Email],[CustomerSubscriptions].[SMS],[CustomerSubscriptions].[Push],[CustomerSubscriptions].[IsCustomizable],[CustomerSubscriptions].[ResendPeriod] FROM [CustomerSubscriptions] ";
		private const string InsertQuery = @"INSERT INTO CustomerSubscriptions([CustomerSubscriptions].[CustomerId],[CustomerSubscriptions].[CustomerNotificationsType],[CustomerSubscriptions].[Email],[CustomerSubscriptions].[SMS],[CustomerSubscriptions].[Push],[CustomerSubscriptions].[IsCustomizable],[CustomerSubscriptions].[ResendPeriod]{columns})  VALUES(@CustomerId,@CustomerNotificationsType,@Email,@SMS,@Push,@IsCustomizable,@ResendPeriod{values}) ";
		private const string UpdateQueryBy = @"UPDATE [CustomerSubscriptions] SET CustomerSubscriptions.[CustomerId] = @CustomerId,CustomerSubscriptions.[CustomerNotificationsType] = @CustomerNotificationsType,CustomerSubscriptions.[Email] = @Email,CustomerSubscriptions.[SMS] = @SMS,CustomerSubscriptions.[Push] = @Push,CustomerSubscriptions.[IsCustomizable] = @IsCustomizable,CustomerSubscriptions.[ResendPeriod] = @ResendPeriod FROM [CustomerSubscriptions] ";
		private const string DeleteQueryBy = @"DELETE FROM [CustomerSubscriptions] ";
		private const string SelectIntoTempTable = @"DECLARE @Temp TABLE (ItemId uniqueidentifier);INSERT INTO @Temp SELECT [CustomerSubscriptions].[] FROM [CustomerSubscriptions] ";


		public CustomerSubscriptionRepository(YumaPos.FrontEnd.Infrastructure.Configuration.IDataAccessService dataAccessService) : base(dataAccessService) { }
		/*
		public IEnumerable<YumaPos.Server.Infrastructure.DataObjects.CustomerSubscription> GetAll()
		{
		var sql = SelectAllQuery;
		var result = DataAccessService.Get<YumaPos.Server.Infrastructure.DataObjects.CustomerSubscription>(sql, null).ToList();
		return result.ToList();
		}
		public async Task<IEnumerable<YumaPos.Server.Infrastructure.DataObjects.CustomerSubscription>> GetAllAsync()
		{
		var sql = SelectAllQuery;
		var result = (await DataAccessService.GetAsync<YumaPos.Server.Infrastructure.DataObjects.CustomerSubscription>(sql, null));
		return result.ToList();
		}

		*/
		public void Insert(YumaPos.Server.Infrastructure.DataObjects.CustomerSubscription customerSubscription)
		{
			DataAccessService.InsertObject(customerSubscription, InsertQuery);
		}
		public async Task InsertAsync(YumaPos.Server.Infrastructure.DataObjects.CustomerSubscription customerSubscription)
		{
			await DataAccessService.InsertObjectAsync(customerSubscription, InsertQuery);
		}


	}
}
