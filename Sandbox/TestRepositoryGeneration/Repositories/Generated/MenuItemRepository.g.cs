//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using YumaPos.Server.Infrastructure.Repositories;
using YumaPos.Server.Infrastructure.DataObjects;
using TestRepositoryGeneration;
using YumaPos.Server.Data.Sql;



namespace TestRepositoryGeneration
{
	public partial class MenuItemRepository : IMenuItemRepository
	{
		private MenuItemCacheRepository _menuItemCacheRepository;
		private MenuItemVersionRepository _menuItemVersionRepository;
		private MenuItemToTaxCacheRepository _menuItemToTaxCacheRepository;
		private MenuItemToTaxVersionRepository _menuItemToTaxVersionRepository;
		private TaxCacheRepository _taxCacheRepository;


		public MenuItemRepository(YumaPos.FrontEnd.Infrastructure.Configuration.IDataAccessService dataAccessService)
		{
			_menuItemCacheRepository = new MenuItemCacheRepository(dataAccessService);
			_menuItemVersionRepository = new MenuItemVersionRepository(dataAccessService);
			_menuItemToTaxCacheRepository = new MenuItemToTaxCacheRepository(dataAccessService);
			_menuItemToTaxVersionRepository = new MenuItemToTaxVersionRepository(dataAccessService);
			_taxCacheRepository = new TaxCacheRepository(dataAccessService);
		}

		public IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem> GetAll(bool? isDeleted = false)
		{
			return _menuItemCacheRepository.GetAll(isDeleted);
		}
		public async Task<IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem>> GetAllAsync(bool? isDeleted = false)
		{
			return await _menuItemCacheRepository.GetAllAsync(isDeleted);
		}

		public YumaPos.Server.Infrastructure.DataObjects.MenuItem GetByItemId(System.Guid itemId, bool? isDeleted = false)
		{
			return _menuItemCacheRepository.GetByItemId(itemId, isDeleted);
		}
		public async Task<YumaPos.Server.Infrastructure.DataObjects.MenuItem> GetByItemIdAsync(System.Guid itemId, bool? isDeleted = false)
		{
			return await _menuItemCacheRepository.GetByItemIdAsync(itemId, isDeleted);
		}

		public IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem> GetByMenuCategoryId(System.Guid menuCategoryId, bool? isDeleted = false)
		{
			return _menuItemCacheRepository.GetByMenuCategoryId(menuCategoryId, isDeleted);
		}
		public async Task<IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem>> GetByMenuCategoryIdAsync(System.Guid menuCategoryId, bool? isDeleted = false)
		{
			return await _menuItemCacheRepository.GetByMenuCategoryIdAsync(menuCategoryId, isDeleted);
		}

		public YumaPos.Server.Infrastructure.DataObjects.MenuItem GetByItemVersionId(System.Guid itemVersionId, bool? isDeleted = false)
		{
			return _menuItemVersionRepository.GetByItemVersionId(itemVersionId, isDeleted);
		}
		public async Task<YumaPos.Server.Infrastructure.DataObjects.MenuItem> GetByItemVersionIdAsync(System.Guid itemVersionId, bool? isDeleted = false)
		{
			return await _menuItemVersionRepository.GetByItemVersionIdAsync(itemVersionId, isDeleted);
		}

		public System.Guid Insert(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
			menuItem.Modified = DateTimeOffset.Now;
			menuItem.ItemVersionId = _menuItemVersionRepository.Insert(menuItem);
			var res = _menuItemCacheRepository.Insert(menuItem);
			UpdateMenuItemToTax(menuItem);
			return (System.Guid)res;
		}
		public async Task<System.Guid> InsertAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
			menuItem.Modified = DateTimeOffset.Now;
			menuItem.ItemVersionId = await _menuItemVersionRepository.InsertAsync(menuItem);
			var res = await _menuItemCacheRepository.InsertAsync(menuItem);
			UpdateMenuItemToTax(menuItem);
			return (System.Guid)res;
		}

		public void UpdateByItemId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
			menuItem.Modified = DateTimeOffset.Now;
			menuItem.ItemVersionId = _menuItemVersionRepository.Insert(menuItem);
			_menuItemCacheRepository.UpdateByItemId(menuItem);
			UpdateMenuItemToTax(menuItem);
		}
		public async Task UpdateByItemIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
			menuItem.Modified = DateTimeOffset.Now;
			menuItem.ItemVersionId = await _menuItemVersionRepository.InsertAsync(menuItem);
			await _menuItemCacheRepository.UpdateByItemIdAsync(menuItem);
			UpdateMenuItemToTax(menuItem);
		}
		/*
		public void UpdateByMenuCategoryId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
		menuItem.Modified = DateTimeOffset.Now;
		menuItem.ItemVersionId = _menuItemVersionRepository.Insert(menuItem);
		_menuItemCacheRepository.UpdateByMenuCategoryId(menuItem);
		UpdateMenuItemToTax(menuItem);
		}
		public async Task UpdateByMenuCategoryIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
		menuItem.Modified = DateTimeOffset.Now;
		menuItem.ItemVersionId = await _menuItemVersionRepository.InsertAsync(menuItem);
		await _menuItemCacheRepository.UpdateByMenuCategoryIdAsync(menuItem);
		UpdateMenuItemToTax(menuItem);
		}

		*/
		private void UpdateMenuItemToTax(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
			if (menuItem.TaxIds == null)
				menuItem.TaxIds = _menuItemToTaxCacheRepository.GetByItemId(menuItem.ItemId).Select(i => i.TaxId);
			var listOfMenuItemToTax = menuItem.TaxIds.Select(ids => new MenuItemToTax()
			{
				TaxId = ids,
				TaxVersionId = _taxCacheRepository.GetByTaxId(ids).TaxVersionId,
				ItemId = menuItem.ItemId,
				ItemVersionId = menuItem.ItemVersionId,
			}).ToList();
			_menuItemToTaxCacheRepository.RemoveByItemId(menuItem.ItemId);
			foreach (var mt in listOfMenuItemToTax)
			{
				mt.Modified = DateTimeOffset.Now;
				mt.ModifiedBy = menuItem.ModifiedBy;
				_menuItemToTaxCacheRepository.Insert(mt);
				_menuItemToTaxVersionRepository.Insert(mt);
			}
		}

		public void RemoveByItemId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
			menuItem.IsDeleted = true;
			_menuItemCacheRepository.UpdateByItemId(menuItem);
		}
		public async Task RemoveByItemIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
			menuItem.IsDeleted = true;
			await _menuItemCacheRepository.UpdateByItemIdAsync(menuItem);
		}
		public void RemoveByItemId(System.Guid itemId)
		{
			var result = _menuItemCacheRepository.GetByItemId(itemId);
			result.IsDeleted = true;
			UpdateByItemId(result);
		}
		public async Task RemoveByItemIdAsync(System.Guid itemId)
		{
			var result = await _menuItemCacheRepository.GetByItemIdAsync(itemId);
			result.IsDeleted = true;
			await UpdateByItemIdAsync(result);
		}

		/*
		public void RemoveByMenuCategoryId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
		menuItem.IsDeleted = true;
		_menuItemCacheRepository.UpdateByMenuCategoryId(menuItem);
		}
		public async Task RemoveByMenuCategoryIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
		menuItem.IsDeleted = true;
		await _menuItemCacheRepository.UpdateByMenuCategoryIdAsync(menuItem);
		}
		public void RemoveByMenuCategoryId(System.Guid menuCategoryId)
		{
		var result = _menuItemCacheRepository.GetByMenuCategoryId(menuCategoryId);
		foreach (var item in result)
		{
		item.IsDeleted = true;
		UpdateByMenuCategoryId(item);
		}
		}
		public async Task RemoveByMenuCategoryIdAsync(System.Guid menuCategoryId)
		{
		var result = await _menuItemCacheRepository.GetByMenuCategoryIdAsync(menuCategoryId);
		foreach (var item in result)
		{
		item.IsDeleted = true;
		await UpdateByMenuCategoryIdAsync(item);
		}
		}

		*/

	}
}
