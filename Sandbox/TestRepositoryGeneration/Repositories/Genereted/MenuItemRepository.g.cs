//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using YumaPos.Server.Infrastructure.Repositories;
using YumaPos.Server.Infrastructure.DataObjects;
using TestRepositoryGeneration;
using YumaPos.Server.Data.Sql;



namespace TestRepositoryGeneration
{
public partial class MenuItemRepository : RepositoryBase,IMenuItemRepository
{
private MenuItemCacheRepository _menuItemCacheRepository;
private MenuItemVersionRepository _menuItemVersionRepository;
private MenuItemToTaxCacheRepository _menuItemToTaxCacheRepository;
private MenuItemToTaxVersionRepository _menuItemToTaxVersionRepository;
private TaxCacheRepository _taxCacheRepository;


public MenuItemRepository(YumaPos.FrontEnd.Infrastructure.Configuration.IDataAccessService dataAccessService) : base(dataAccessService)
{
_menuItemCacheRepository = new MenuItemCacheRepository(dataAccessService);
_menuItemVersionRepository = new MenuItemVersionRepository(dataAccessService);
_menuItemToTaxCacheRepository = new MenuItemToTaxCacheRepository(dataAccessService);
_menuItemToTaxVersionRepository = new MenuItemToTaxVersionRepository(dataAccessService);
_taxCacheRepository = new TaxCacheRepository(dataAccessService);
}

public IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem> GetAll(Boolean? isDeleted = false)
{
return _menuItemCacheRepository.GetAll(isDeleted);
}
public async Task<IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem>> GetAllAsync(Boolean? isDeleted = false)
{
return await _menuItemCacheRepository.GetAllAsync(isDeleted);
}

public IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem> GetByItemId(Guid  itemId, Boolean? isDeleted = false)
{
return _menuItemCacheRepository.GetByItemId(itemId, isDeleted);
}
public async Task<IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem>> GetByItemIdAsync(Guid  itemId, Boolean? isDeleted = false)
{
return await _menuItemCacheRepository.GetByItemIdAsync(itemId, isDeleted);
}
/*
public IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem> GetByMenuCategoryId(Guid  menuCategoryId, Boolean? isDeleted = false)
{
return _menuItemCacheRepository.GetByMenuCategoryId(menuCategoryId, isDeleted);
}
public async Task<IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem>> GetByMenuCategoryIdAsync(Guid  menuCategoryId, Boolean? isDeleted = false)
{
return await _menuItemCacheRepository.GetByMenuCategoryIdAsync(menuCategoryId, isDeleted);
}

*/
public void Insert(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
menuItem.Modified = DateTimeOffset.Now;
menuItem.ItemVersionId = _menuItemVersionRepository.Insert(menuItem);
_menuItemCacheRepository.Insert(menuItem);
UpdateMenuItemToTax(menuItem);
}
public async Task InsertAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
menuItem.Modified = DateTimeOffset.Now;
menuItem.ItemVersionId = await _menuItemVersionRepository.InsertAsync(menuItem);
await _menuItemCacheRepository.InsertAsync(menuItem);
UpdateMenuItemToTax(menuItem);
}

public void UpdateByItemId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
menuItem.Modified = DateTimeOffset.Now;
menuItem.ItemVersionId = _menuItemVersionRepository.Insert(menuItem);
_menuItemCacheRepository.UpdateByItemId(menuItem);
UpdateMenuItemToTax(menuItem);
}
public async Task UpdateByItemIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
menuItem.Modified = DateTimeOffset.Now;
menuItem.ItemVersionId = await _menuItemVersionRepository.InsertAsync(menuItem);
await _menuItemCacheRepository.UpdateByItemIdAsync(menuItem);
UpdateMenuItemToTax(menuItem);
}
/*
public void UpdateByMenuCategoryId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
menuItem.Modified = DateTimeOffset.Now;
menuItem.ItemVersionId = _menuItemVersionRepository.Insert(menuItem);
_menuItemCacheRepository.UpdateByMenuCategoryId(menuItem);
UpdateMenuItemToTax(menuItem);
}
public async Task UpdateByMenuCategoryIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
menuItem.Modified = DateTimeOffset.Now;
menuItem.ItemVersionId = await _menuItemVersionRepository.InsertAsync(menuItem);
await _menuItemCacheRepository.UpdateByMenuCategoryIdAsync(menuItem);
UpdateMenuItemToTax(menuItem);
}

*/
private void UpdateMenuItemToTax(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
if (menuItem.TaxesId == null)
menuItem.TaxesId = _menuItemToTaxCacheRepository.GetByItemId(menuItem.ItemId).Select(i => i.TaxId);
var listOfMenuItemToTax = menuItem.TaxesId.Select(ids => new MenuItemToTax()
{
TaxId = ids,
TaxVersionId = _taxCacheRepository.GetByTaxId(ids).First().TaxVersionId,
ItemId = menuItem.ItemId,
ItemVersionId = menuItem.ItemVersionId,
}).ToList();
_menuItemToTaxCacheRepository.RemoveByItemId(menuItem.ItemId);
foreach (var mt in listOfMenuItemToTax)
{
mt.Modified = DateTimeOffset.Now;
mt.ModifiedBy = menuItem.ModifiedBy;
_menuItemToTaxCacheRepository.Insert(mt);
_menuItemToTaxVersionRepository.Insert(mt);
}
}

public void RemoveByItemId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
menuItem.IsDeleted = true;
_menuItemCacheRepository.UpdateByItemId(menuItem);
}
public async Task RemoveByItemIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
menuItem.IsDeleted = true;
await _menuItemCacheRepository.UpdateByItemIdAsync(menuItem);
}
public void RemoveByItemId(Guid  itemId)
{
var result = _menuItemCacheRepository.GetByItemId(itemId);
foreach (var item in result)
{
item.IsDeleted = true;
UpdateByItemId(item);
}
}
public async Task RemoveByItemIdAsync(Guid  itemId)
{
var result = await _menuItemCacheRepository.GetByItemIdAsync(itemId);
foreach (var item in result)
{
item.IsDeleted = true;
await UpdateByItemIdAsync(item);
}
}
/*
public void RemoveByMenuCategoryId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
menuItem.IsDeleted = true;
_menuItemCacheRepository.UpdateByMenuCategoryId(menuItem);
}
public async Task RemoveByMenuCategoryIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
menuItem.IsDeleted = true;
await _menuItemCacheRepository.UpdateByMenuCategoryIdAsync(menuItem);
}
public void RemoveByMenuCategoryId(Guid  menuCategoryId)
{
var result = _menuItemCacheRepository.GetByMenuCategoryId(menuCategoryId);
foreach (var item in result)
{
item.IsDeleted = true;
UpdateByMenuCategoryId(item);
}
}
public async Task RemoveByMenuCategoryIdAsync(Guid  menuCategoryId)
{
var result = await _menuItemCacheRepository.GetByMenuCategoryIdAsync(menuCategoryId);
foreach (var item in result)
{
item.IsDeleted = true;
await UpdateByMenuCategoryIdAsync(item);
}
}

*/

}
}
