//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using YumaPos.Server.Data.Sql;



namespace TestRepositoryGeneration
{
public partial class MenuItemCacheRepository : RepositoryBase
{
private const string SelectQuery = "SELECT [Name],[Modified],[ModifiedBy],[TaxesId],[MenuCategoryId] FROM [MenuItems]";
private const string InsertQuery = "INSERT INTO MenuItems([Name],[Modified],[ModifiedBy],[TaxesId],[MenuCategoryId]) VALUES(@Name,@Modified,@ModifiedBy,@TaxesId,@MenuCategoryId)";
private const string WhereQueryByMenuCategoryId = "WHERE MenuItems.[MenuCategoryId] = @MenuCategoryId";
private const string UpdateQueryByMenuCategoryId = "UPDATE [MenuItems] SET MenuItems.[MenuCategoryId] = @MenuCategoryId";
private const string DeleteQueryByMenuCategoryId = "DELETE FROM[MenuItems] WHERE MenuItems.[MenuCategoryId] = @MenuCategoryId";
private const string AndWithFilterData = "WHERE MenuItems.[IsDeleted] = @IsDeleted";


public MenuItemCacheRepository(YumaPos.FrontEnd.Infrastructure.Configuration.IDataAccessService dataAccessService) : base(dataAccessService) { }
public IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem> GetAll(Boolean? isDeleted = false)
{
object parameters = new {isDeleted};
var sql = SelectQuery;
if (isDeleted.HasValue)
{
sql = sql + AndWithFilterData;
}
var result = DataAccessService.Get<YumaPos.Server.Infrastructure.DataObjects.MenuItem>(sql, parameters).ToList();
return result.ToList();
}
public async Task<IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem>> GetAllAsync(Boolean? isDeleted = false)
{
object parameters = new {isDeleted};
var sql = SelectQuery;
if (isDeleted.HasValue)
{
sql = sql + AndWithFilterData;
}
var result = (await DataAccessService.GetAsync<YumaPos.Server.Infrastructure.DataObjects.MenuItem>(sql, parameters));
return result.ToList();
}

public IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem> GetByItemId(Guid  itemId, Boolean? isDeleted = false)
{
object parameters = new {itemId,isDeleted};
var sql = SelectQuery + WhereQueryByItemId;
if (isDeleted.HasValue)
{
sql = sql + AndWithFilterData;
}
var result = DataAccessService.Get<YumaPos.Server.Infrastructure.DataObjects.MenuItem>(sql, new {itemId});
return result.ToList();
}
public async Task<IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem>> GetByItemIdAsync(Guid  itemId, Boolean? isDeleted = false)
{
object parameters = new {itemId,isDeleted};
var sql = SelectQuery + WhereQueryByItemId;
if (isDeleted.HasValue)
{
sql = sql + AndWithFilterData;
}
var result = (await DataAccessService.GetAsync<YumaPos.Server.Infrastructure.DataObjects.MenuItem>(sql, new {itemId}));
return result.ToList();
}

/*
public IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem> GetByMenuCategoryId(Guid  menuCategoryId, Boolean? isDeleted = false)
{
object parameters = new {menuCategoryId,isDeleted};
var sql = SelectQuery + WhereQueryByMenuCategoryId;
if (isDeleted.HasValue)
{
sql = sql + AndWithFilterData;
}
var result = DataAccessService.Get<YumaPos.Server.Infrastructure.DataObjects.MenuItem>(sql, new {menuCategoryId});
return result.ToList();
}
public async Task<IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem>> GetByMenuCategoryIdAsync(Guid  menuCategoryId, Boolean? isDeleted = false)
{
object parameters = new {menuCategoryId,isDeleted};
var sql = SelectQuery + WhereQueryByMenuCategoryId;
if (isDeleted.HasValue)
{
sql = sql + AndWithFilterData;
}
var result = (await DataAccessService.GetAsync<YumaPos.Server.Infrastructure.DataObjects.MenuItem>(sql, new {menuCategoryId}));
return result.ToList();
}


*/
public void Insert(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
DataAccessService.InsertObject(menuItem,InsertQuery);
}
public async Task InsertAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
await DataAccessService.InsertObjectAsync(menuItem,InsertQuery);
}

public void UpdateByItemId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
var sql = UpdateQueryByItemId + WhereQueryByItemId; 
DataAccessService.PersistObject(menuItem, sql);
}
public async Task UpdateByItemIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
var sql = UpdateQueryByItemId + WhereQueryByItemId; 
await DataAccessService.PersistObjectAsync(menuItem, sql);
}

/*
public void UpdateByMenuCategoryId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
var sql = UpdateQueryByMenuCategoryId + WhereQueryByMenuCategoryId; 
DataAccessService.PersistObject(menuItem, sql);
}
public async Task UpdateByMenuCategoryIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
var sql = UpdateQueryByMenuCategoryId + WhereQueryByMenuCategoryId; 
await DataAccessService.PersistObjectAsync(menuItem, sql);
}


*/
public void RemoveByItemId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
var sql = DeleteQueryByItemId + WhereQueryByItemId; 
DataAccessService.PersistObject(menuItem, sql);
}
public async Task RemoveByItemIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
var sql = DeleteQueryByItemId + WhereQueryByItemId; 
await DataAccessService.PersistObjectAsync(menuItem, sql);
}

public void RemoveByItemId(Guid  itemId)
{
var sql = DeleteQueryByItemId + WhereQueryByItemId; 
DataAccessService.PersistObject<YumaPos.Server.Infrastructure.DataObjects.MenuItem>(sql, new {itemId});
}
public async Task RemoveByItemIdAsync(Guid  itemId)
{
var sql = DeleteQueryByItemId + WhereQueryByItemId; 
await DataAccessService.PersistObjectAsync<YumaPos.Server.Infrastructure.DataObjects.MenuItem>(sql, new {itemId});
}

/*
public void RemoveByMenuCategoryId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
var sql = DeleteQueryByMenuCategoryId + WhereQueryByMenuCategoryId; 
DataAccessService.PersistObject(menuItem, sql);
}
public async Task RemoveByMenuCategoryIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
{
var sql = DeleteQueryByMenuCategoryId + WhereQueryByMenuCategoryId; 
await DataAccessService.PersistObjectAsync(menuItem, sql);
}

public void RemoveByMenuCategoryId(Guid  menuCategoryId)
{
var sql = DeleteQueryByMenuCategoryId + WhereQueryByMenuCategoryId; 
DataAccessService.PersistObject<YumaPos.Server.Infrastructure.DataObjects.MenuItem>(sql, new {menuCategoryId});
}
public async Task RemoveByMenuCategoryIdAsync(Guid  menuCategoryId)
{
var sql = DeleteQueryByMenuCategoryId + WhereQueryByMenuCategoryId; 
await DataAccessService.PersistObjectAsync<YumaPos.Server.Infrastructure.DataObjects.MenuItem>(sql, new {menuCategoryId});
}


*/

}
}
