//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using YumaPos.Server.Data.Sql;
using YumaPos.Server.Infrastructure.Repositories;



namespace TestRepositoryGeneration
{
public class RecipieItemСacheRepository : RepositoryBase,IRecipieItemRepository
{
public RecipieItemСacheRepository(YumaPos.FrontEnd.Infrastructure.Configuration.IDataAccessService dataAccessService) : base(dataAccessService) { }
private const string SelectQuery = "SELECT [ItemId],[ItemVersionId],[IsDeleted],[CategoryId] FROM [RecipieItems]";
private const string InsertQuery = "INSERT INTO RecipieItems([ItemId],[ItemVersionId],[IsDeleted],[CategoryId]) VALUES(@ItemId,@ItemVersionId,@IsDeleted,@CategoryId)";
private const string WhereQueryByCategoryId = "WHERE RecipieItems.[CategoryId] = @CategoryId";
private const string UpdateQueryByCategoryId = "UPDATE [RecipieItems] SET RecipieItems.[CategoryId] = @CategoryId";
private const string DeleteQueryByCategoryId = "DELETE FROM[RecipieItems] WHERE RecipieItems.[CategoryId] = @CategoryId";
private const string AndWithFilterData = "WHERE RecipieItems.[IsDeleted] = @IsDeleted";


public IEnumerable<YumaPos.Server.Infrastructure.DataObjects.RecipieItem> GetAll(bool? isDeleted = false)
{
object parameters = null;
var sql = SelectQuery;
if (isDeleted.HasValue)
{
parameters = new { isDeleted };
sql = sql + AndWithFilterData;
}
var result = DataAccessService.Get<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>(sql, parameters).ToList();
return result.ToList();
}
public async Task<IEnumerable<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>> GetAllAsync(bool? isDeleted = false)
{
object parameters = null;
var sql = SelectQuery;
if (isDeleted.HasValue)
{
parameters = new { isDeleted };
sql = sql + AndWithFilterData;
}
var result = (await DataAccessService.GetAsync<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>(sql, parameters));
return result.ToList();
}

/*
public IEnumerable<YumaPos.Server.Infrastructure.DataObjects.RecipieItem> GetByCategoryId(string  categoryId, bool? isDeleted = false)
{
object parameters = new {CategoryId};
var sql = SelectQuery + WhereQueryByCategoryId;
if (isDeleted.HasValue)
{
parameters = new { isDeleted,CategoryId };
sql = sql + AndWithFilterData;
}
var result = DataAccessService.Get<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>(SelectQueryCategoryId, new {string  categoryId});
return result.ToList();
}
public async Task<IEnumerable<YumaPos.Server.Infrastructure.DataObjects.RecipieItem> GetByCategoryIdAsync()(string  categoryId, bool? isDeleted = false)
{
object parameters = null;
var sql = SelectQuery;
if (isDeleted.HasValue)
{
parameters = new { isDeleted };
sql = sql + AndWithFilterData;
}
var result = (await DataAccessService.GetAsync<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>(SelectQueryCategoryId, new {CategoryId}));
return result.ToList();
}


*/
public Guid Insert(YumaPos.Server.Infrastructure.DataObjects.RecipieItem recipieItem)
{
return DataAccessService.InsertObject(recipieItem,InsertQuery);
}
public async Task<Guid> InsertAsync(YumaPos.Server.Infrastructure.DataObjects.RecipieItem recipieItem );
{
return await DataAccessService.InsertObjectAsync(recipieItem,InsertQuery);
}

/*
public void UpdateByCategoryId(string  categoryId)
{
DataAccessService.PersistObject<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>(UpdateQueryByCategoryId, new {categoryId}).ToList();
}
public async Task UpdateByCategoryIdAsync(string  categoryId))
{
await DataAccessService.PersistObjectAsync<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>(UpdateQueryByCategoryId, new {categoryId});
}


*/
/*
public void RemoveByCategoryId(string  categoryId)
{
DataAccessService.PersistObject<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>(DeleteQueryByCategoryId, new {categoryId});
}
public async Task RemoveByCategoryIdAsync(string  categoryId))
{
await DataAccessService.PersistObjectAsync<YumaPos.Server.Infrastructure.DataObjects.RecipieItem>(DeleteQueryByCategoryId, new {categoryId});
}


*/

}
}
