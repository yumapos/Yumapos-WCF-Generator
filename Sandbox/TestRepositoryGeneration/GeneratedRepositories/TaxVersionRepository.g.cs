//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;


namespace TestRepositoryGeneration
{
	internal class TaxVersionRepository : TestRepositoryGeneration.Infrastructure.RepositoryBase
	{
		private const string InsertQuery = @"INSERT INTO [TaxVersions]([Taxs].[TaxId],[Taxs].[TaxVersionId],[Taxs].[Name],[Taxs].[Modified],[Taxs].[ModifiedBy],[Taxs].[IsDeleted],[Taxs].[TenantId])
VALUES (@TaxId,@TaxVersionId,@Name,@Modified,@ModifiedBy,@IsDeleted,@TenantId)";
		private const string InsertManyQuery = @"INSERT INTO [TaxVersions]([Taxs].[TaxId],[Taxs].[TaxVersionId],[Taxs].[Name],[Taxs].[Modified],[Taxs].[ModifiedBy],[Taxs].[IsDeleted],[Taxs].[TenantId])
VALUES (@TaxId{0},@TaxVersionId{0},@Name{0},@Modified{0},@ModifiedBy{0},@IsDeleted{0},@TenantId{0})";
		private const string SelectBy = @"SELECT [TaxVersions].[TaxId],[TaxVersions].[TaxVersionId],[TaxVersions].[Name],[TaxVersions].[Modified],[TaxVersions].[ModifiedBy],[TaxVersions].[IsDeleted] FROM [TaxVersions]  {filter} ";
		private const string SelectByKeyAndSliceDateQuery = @"SELECT [TaxVersions].[TaxId],[TaxVersions].[TaxVersionId],[TaxVersions].[Name],[TaxVersions].[Modified],[TaxVersions].[ModifiedBy],[TaxVersions].[IsDeleted] FROM (SELECT versionTable1.[TaxId], MAX(versionTable1.[Modified]) as Modified FROM [TaxVersions] versionTable1  {filter}  GROUP BY versionTable1.[TaxId]) versionTable INNER JOIN [TaxVersions] ON versionTable.[TaxId] = [TaxVersions].[TaxId] AND versionTable.[Modified] = [TaxVersions].[Modified]";
		private const string WhereQueryByTaxId = "WHERE [TaxVersions].[TaxId] = @TaxId{andTenantId:[TaxVersions]} ";
		private const string WhereQueryByWithAliasTaxId = "WHERE versionTable1.[TaxId] = @TaxId{andTenantId:versionTable1} ";
		private const string WhereQueryByTaxVersionId = "WHERE [TaxVersions].[TaxVersionId] = @TaxVersionId{andTenantId:[TaxVersions]} ";
		private const string WhereQueryByWithAliasTaxVersionId = "WHERE versionTable1.[TaxVersionId] = @TaxVersionId{andTenantId:versionTable1} ";
		private const string AndWithIsDeletedFilter = "AND [TaxVersions].[IsDeleted] = @IsDeleted ";
		private const string AndWithIsDeletedFilterWithAlias = "AND versionTable1.[IsDeleted] = @IsDeleted ";
		private const string AndWithSliceDateFilter = "AND versionTable1.[Modified] <= @Modified ";

		public TaxVersionRepository(TestRepositoryGeneration.Infrastructure.IDataAccessService dataAccessService, TestRepositoryGeneration.Infrastructure.IDataAccessController dataAccessController) : base(dataAccessService, dataAccessController) { }
		public void Insert(TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax tax)
		{
			DataAccessService.InsertObject(tax, InsertQuery);
		}
		public async Task InsertAsync(TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax tax)
		{
			await DataAccessService.InsertObjectAsync(tax, InsertQuery);
		}

		public void InsertMany(IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax> taxList)
		{
			if (taxList == null) throw new ArgumentException(nameof(taxList));

			if (!taxList.Any()) return;

			var query = new System.Text.StringBuilder();
			var counter = 0;
			var parameters = new Dictionary<string, object>();
			parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
			foreach (var tax in taxList)
			{
				if (parameters.Count + 7 > MaxRepositoryParams)
				{
					DataAccessService.Execute(query.ToString(), parameters);
					query.Clear();
					counter = 0;
					parameters.Clear();
					parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
				}
				parameters.Add($"TaxId{counter}", tax.TaxId);
				parameters.Add($"TaxVersionId{counter}", tax.TaxVersionId);
				parameters.Add($"Name{counter}", tax.Name);
				parameters.Add($"Modified{counter}", tax.Modified);
				parameters.Add($"ModifiedBy{counter}", tax.ModifiedBy);
				parameters.Add($"IsDeleted{counter}", tax.IsDeleted);
				query.AppendFormat(InsertManyQuery, counter);
				counter++;
			}
			DataAccessService.Execute(query.ToString(), parameters);
		}

		public async Task InsertManyAsync(IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax> taxList)
		{
			if (taxList == null) throw new ArgumentException(nameof(taxList));

			if (!taxList.Any()) return;

			var query = new System.Text.StringBuilder();
			var counter = 0;
			var parameters = new Dictionary<string, object>();
			parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
			foreach (var tax in taxList)
			{
				if (parameters.Count + 7 > MaxRepositoryParams)
				{
					await DataAccessService.ExecuteAsync(query.ToString(), parameters);
					query.Clear();
					counter = 0;
					parameters.Clear();
					parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
				}
				parameters.Add($"TaxId{counter}", tax.TaxId);
				parameters.Add($"TaxVersionId{counter}", tax.TaxVersionId);
				parameters.Add($"Name{counter}", tax.Name);
				parameters.Add($"Modified{counter}", tax.Modified);
				parameters.Add($"ModifiedBy{counter}", tax.ModifiedBy);
				parameters.Add($"IsDeleted{counter}", tax.IsDeleted);
				query.AppendFormat(InsertManyQuery, counter);
				counter++;
			}
			await DataAccessService.ExecuteAsync(query.ToString(), parameters);
		}

		public TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax GetByTaxId(int taxId, DateTimeOffset modified, bool? isDeleted = false)
		{
			object parameters = new { taxId, modified, isDeleted };
			var filter = WhereQueryByWithAliasTaxId;
			if (isDeleted.HasValue)
			{
				filter = filter + AndWithIsDeletedFilterWithAlias;
			}
			filter = filter + AndWithSliceDateFilter;
			var sql = SelectByKeyAndSliceDateQuery.Replace("{filter}", filter);
			var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax>(sql, parameters);
			return result.FirstOrDefault();
		}
		public async Task<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax> GetByTaxIdAsync(int taxId, DateTimeOffset modified, bool? isDeleted = false)
		{
			object parameters = new { taxId, modified, isDeleted };
			var filter = WhereQueryByWithAliasTaxId;
			if (isDeleted.HasValue)
			{
				filter = filter + AndWithIsDeletedFilterWithAlias;
			}
			filter = filter + AndWithSliceDateFilter;
			var sql = SelectByKeyAndSliceDateQuery.Replace("{filter}", filter);
			var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax>(sql, parameters));
			return result.FirstOrDefault();
		}


		/*
		public IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax> GetByTaxVersionId(System.Guid taxVersionId, bool? isDeleted = false)
		{
		object parameters = new {taxVersionId, isDeleted};
		var filter = WhereQueryByTaxVersionId;
		if (isDeleted.HasValue)
		{
		filter = filter + AndWithIsDeletedFilter;
		}
		var sql = SelectBy.Replace("{filter}", filter);
		var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax>(sql, parameters);
		return result.ToList();
		}
		public async Task<IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax>> GetByTaxVersionIdAsync(System.Guid taxVersionId, bool? isDeleted = false)
		{
		object parameters = new {taxVersionId, isDeleted};
		var filter = WhereQueryByTaxVersionId;
		if (isDeleted.HasValue)
		{
		filter = filter + AndWithIsDeletedFilter;
		}
		var sql = SelectBy.Replace("{filter}", filter);
		var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax>(sql, parameters));
		return result.ToList();
		}


		*/

	}
}
