//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using TestRepositoryGeneration.RepositoryInterfaces;


namespace TestRepositoryGeneration
{
	public partial class EmployeesInRolesScheduleRepository : TestRepositoryGeneration.Infrastructure.RepositoryBase, TestRepositoryGeneration.RepositoryInterfaces.IEmployeesInRolesScheduleRepository
	{
		private const string Fields = @"[EmployeesInRolesSchedule].[ScheduleId],[EmployeesInRolesSchedule].[RoleId],[EmployeesInRolesSchedule].[UserId],[EmployeesInRolesSchedule].[StoreId],[EmployeesInRolesSchedule].[BusinessDayNumber],[EmployeesInRolesSchedule].[Start],[EmployeesInRolesSchedule].[End],[EmployeesInRolesSchedule].[IsDeleted]";
		private const string SelectAllQuery = @"SELECT [EmployeesInRolesSchedule].[ScheduleId],[EmployeesInRolesSchedule].[RoleId],[EmployeesInRolesSchedule].[UserId],[EmployeesInRolesSchedule].[StoreId],[EmployeesInRolesSchedule].[BusinessDayNumber],[EmployeesInRolesSchedule].[Start],[EmployeesInRolesSchedule].[End],[EmployeesInRolesSchedule].[IsDeleted] FROM [EmployeesInRolesSchedule]  {whereTenantId:[EmployeesInRolesSchedule]} ";
		private const string SelectByQuery = @"SELECT [EmployeesInRolesSchedule].[ScheduleId],[EmployeesInRolesSchedule].[RoleId],[EmployeesInRolesSchedule].[UserId],[EmployeesInRolesSchedule].[StoreId],[EmployeesInRolesSchedule].[BusinessDayNumber],[EmployeesInRolesSchedule].[Start],[EmployeesInRolesSchedule].[End],[EmployeesInRolesSchedule].[IsDeleted] FROM [EmployeesInRolesSchedule] ";
		private const string InsertQuery = @"INSERT INTO [EmployeesInRolesSchedule]([EmployeesInRolesSchedule].[RoleId],[EmployeesInRolesSchedule].[UserId],[EmployeesInRolesSchedule].[StoreId],[EmployeesInRolesSchedule].[BusinessDayNumber],[EmployeesInRolesSchedule].[Start],[EmployeesInRolesSchedule].[End],[EmployeesInRolesSchedule].[IsDeleted],[EmployeesInRolesSchedule].[TenantId]) OUTPUT INSERTED.ScheduleId VALUES(@RoleId,@UserId,@StoreId,@BusinessDayNumber,@Start,@End,@IsDeleted,@TenantId) ";
		private const string InsertManyQuery = @"INSERT INTO [EmployeesInRolesSchedule]([EmployeesInRolesSchedule].[RoleId],[EmployeesInRolesSchedule].[UserId],[EmployeesInRolesSchedule].[StoreId],[EmployeesInRolesSchedule].[BusinessDayNumber],[EmployeesInRolesSchedule].[Start],[EmployeesInRolesSchedule].[End],[EmployeesInRolesSchedule].[IsDeleted],[EmployeesInRolesSchedule].[TenantId]) OUTPUT INSERTED.ScheduleId VALUES(@RoleId{0},@UserId{0},@StoreId{0},@BusinessDayNumber{0},@Start{0},@End{0},@IsDeleted{0},@TenantId) ";
		private const string UpdateQueryBy = @"UPDATE [EmployeesInRolesSchedule] SET [EmployeesInRolesSchedule].[RoleId] = @RoleId,[EmployeesInRolesSchedule].[UserId] = @UserId,[EmployeesInRolesSchedule].[StoreId] = @StoreId,[EmployeesInRolesSchedule].[BusinessDayNumber] = @BusinessDayNumber,[EmployeesInRolesSchedule].[Start] = @Start,[EmployeesInRolesSchedule].[End] = @End,[EmployeesInRolesSchedule].[IsDeleted] = @IsDeleted FROM [EmployeesInRolesSchedule] ";
		private const string DeleteQueryBy = @"UPDATE [EmployeesInRolesSchedule] SET IsDeleted = 1 ";
		private const string InsertOrUpdateQuery = @"UPDATE [EmployeesInRolesSchedule] SET [EmployeesInRolesSchedule].[RoleId] = @RoleId,[EmployeesInRolesSchedule].[UserId] = @UserId,[EmployeesInRolesSchedule].[StoreId] = @StoreId,[EmployeesInRolesSchedule].[BusinessDayNumber] = @BusinessDayNumber,[EmployeesInRolesSchedule].[Start] = @Start,[EmployeesInRolesSchedule].[End] = @End,[EmployeesInRolesSchedule].[IsDeleted] = @IsDeleted FROM [EmployeesInRolesSchedule]  WHERE [EmployeesInRolesSchedule].[ScheduleId] = @ScheduleId{andTenantId:[EmployeesInRolesSchedule]}  IF @@ROWCOUNT = 0 BEGIN INSERT INTO [EmployeesInRolesSchedule]([EmployeesInRolesSchedule].[RoleId],[EmployeesInRolesSchedule].[UserId],[EmployeesInRolesSchedule].[StoreId],[EmployeesInRolesSchedule].[BusinessDayNumber],[EmployeesInRolesSchedule].[Start],[EmployeesInRolesSchedule].[End],[EmployeesInRolesSchedule].[IsDeleted],[EmployeesInRolesSchedule].[TenantId]) OUTPUT INSERTED.ScheduleId VALUES(@RoleId,@UserId,@StoreId,@BusinessDayNumber,@Start,@End,@IsDeleted,@TenantId)  END";
		private const string WhereQueryByScheduleId = "WHERE [EmployeesInRolesSchedule].[ScheduleId] = @ScheduleId{andTenantId:[EmployeesInRolesSchedule]} ";
		private const string AndWithIsDeletedFilter = "AND [EmployeesInRolesSchedule].[IsDeleted] = @IsDeleted ";
		private const string WhereWithIsDeletedFilter = "WHERE [EmployeesInRolesSchedule].[IsDeleted] = @IsDeleted{andTenantId:[EmployeesInRolesSchedule]} ";


		public EmployeesInRolesScheduleRepository(TestRepositoryGeneration.Infrastructure.IDataAccessService dataAccessService, TestRepositoryGeneration.Infrastructure.IDataAccessController dataAccessController) : base(dataAccessService, dataAccessController) { }
		/*
		public IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule> GetAll(bool? isDeleted = false)
		{
		var sql = SelectAllQuery;
		object parameters = new {isDeleted};
		if (isDeleted.HasValue)
		{
		sql = sql + AndWithIsDeletedFilter;
		}
		var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>(sql, parameters).ToList();
		return result.ToList();
		}
		public async Task<IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>> GetAllAsync(bool? isDeleted = false)
		{
		var sql = SelectAllQuery;
		object parameters = new {isDeleted};
		if (isDeleted.HasValue)
		{
		sql = sql + AndWithIsDeletedFilter;
		}
		var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>(sql, parameters));
		return result.ToList();
		}

		*/
		public TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule GetByScheduleId(System.Guid scheduleId, bool? isDeleted = false)
		{
			object parameters = new { scheduleId, isDeleted };
			var sql = SelectByQuery + WhereQueryByScheduleId;
			if (isDeleted.HasValue)
			{
				sql = sql + AndWithIsDeletedFilter;
			}
			var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>(sql, parameters);
			return result.FirstOrDefault();
		}
		public async Task<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule> GetByScheduleIdAsync(System.Guid scheduleId, bool? isDeleted = false)
		{
			object parameters = new { scheduleId, isDeleted };
			var sql = SelectByQuery + WhereQueryByScheduleId;
			if (isDeleted.HasValue)
			{
				sql = sql + AndWithIsDeletedFilter;
			}
			var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>(sql, parameters));
			return result.FirstOrDefault();
		}


		public System.Guid Insert(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
			var res = DataAccessService.InsertObject(employeesInRolesSchedule, InsertQuery);
			return (System.Guid)res;
		}
		public async Task<System.Guid> InsertAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
			var res = await DataAccessService.InsertObjectAsync(employeesInRolesSchedule, InsertQuery);
			return (System.Guid)res;
		}

		/*
		public void InsertMany(IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule> employeesInRolesScheduleList)
		{
		if(employeesInRolesScheduleList==null) throw new ArgumentException(nameof(employeesInRolesScheduleList));

		if(!employeesInRolesScheduleList.Any()) return;

		var query = new System.Text.StringBuilder();
		var counter = 0;
		var parameters = new Dictionary<string, object> ();
		foreach (var employeesInRolesSchedule in employeesInRolesScheduleList)
		{
		if (parameters.Count + 9 > MaxRepositoryParams)
		{
		DataAccessService.Execute(query.ToString(), parameters);
		query.Clear();
		counter = 0;
		parameters.Clear();
		}
		parameters.Add($"ScheduleId{counter}", employeesInRolesSchedule.ScheduleId);
		parameters.Add($"RoleId{counter}", employeesInRolesSchedule.RoleId);
		parameters.Add($"UserId{counter}", employeesInRolesSchedule.UserId);
		parameters.Add($"StoreId{counter}", employeesInRolesSchedule.StoreId);
		parameters.Add($"BusinessDayNumber{counter}", employeesInRolesSchedule.BusinessDayNumber);
		parameters.Add($"Start{counter}", employeesInRolesSchedule.Start);
		parameters.Add($"End{counter}", employeesInRolesSchedule.End);
		parameters.Add($"IsDeleted{counter}", employeesInRolesSchedule.IsDeleted);
		parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
		query.AppendFormat(InsertManyQuery, counter);
		counter++;
		}
		DataAccessService.Execute(query.ToString(), parameters);
		}

		public async Task InsertManyAsync(IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule> employeesInRolesScheduleList)
		{
		if(employeesInRolesScheduleList==null) throw new ArgumentException(nameof(employeesInRolesScheduleList));

		if(!employeesInRolesScheduleList.Any()) return;

		var query = new System.Text.StringBuilder();
		var counter = 0;
		var parameters = new Dictionary<string, object>();
		parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
		foreach (var employeesInRolesSchedule in employeesInRolesScheduleList)
		{
		if (parameters.Count + 9 > MaxRepositoryParams)
		{
		await DataAccessService.ExecuteAsync(query.ToString(), parameters);
		query.Clear();
		counter = 0;
		parameters.Clear();
		}
		parameters.Add($"ScheduleId{counter}", employeesInRolesSchedule.ScheduleId);
		parameters.Add($"RoleId{counter}", employeesInRolesSchedule.RoleId);
		parameters.Add($"UserId{counter}", employeesInRolesSchedule.UserId);
		parameters.Add($"StoreId{counter}", employeesInRolesSchedule.StoreId);
		parameters.Add($"BusinessDayNumber{counter}", employeesInRolesSchedule.BusinessDayNumber);
		parameters.Add($"Start{counter}", employeesInRolesSchedule.Start);
		parameters.Add($"End{counter}", employeesInRolesSchedule.End);
		parameters.Add($"IsDeleted{counter}", employeesInRolesSchedule.IsDeleted);
		parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
		query.AppendFormat(InsertManyQuery, counter);
		counter++;
		}
		await DataAccessService.ExecuteAsync(query.ToString(), parameters);
		}

		*/
		/*
		public void UpdateByScheduleId(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
		var sql = UpdateQueryBy + WhereQueryByScheduleId; 
		DataAccessService.PersistObject(employeesInRolesSchedule, sql);
		}
		public async Task UpdateByScheduleIdAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
		var sql = UpdateQueryBy + WhereQueryByScheduleId; 
		await DataAccessService.PersistObjectAsync(employeesInRolesSchedule, sql);
		}


		*/
		/*
		public void RemoveByScheduleId(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
		var sql = DeleteQueryBy + WhereQueryByScheduleId; 
		DataAccessService.PersistObject(employeesInRolesSchedule, sql);
		}
		public async Task RemoveByScheduleIdAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
		var sql = DeleteQueryBy + WhereQueryByScheduleId; 
		await DataAccessService.PersistObjectAsync(employeesInRolesSchedule, sql);
		}

		public void RemoveByScheduleId(System.Guid scheduleId)
		{
		object parameters = new {scheduleId};
		var sql = DeleteQueryBy + WhereQueryByScheduleId; 
		DataAccessService.PersistObject<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>(sql, parameters);
		}
		public async Task RemoveByScheduleIdAsync(System.Guid scheduleId)
		{
		object parameters = new {scheduleId};
		var sql = DeleteQueryBy + WhereQueryByScheduleId; 
		await DataAccessService.PersistObjectAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>(sql, parameters);
		}


		*/
		/*
		public void InsertOrUpdate(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
		DataAccessService.ExecuteScalar(InsertOrUpdateQuery,employeesInRolesSchedule);
		}
		public async Task InsertOrUpdateAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
		await DataAccessService.ExecuteScalarAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule >(InsertOrUpdateQuery,employeesInRolesSchedule);
		}

		*/

	}
}
