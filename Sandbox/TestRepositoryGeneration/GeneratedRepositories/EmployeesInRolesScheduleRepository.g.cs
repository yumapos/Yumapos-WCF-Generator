//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using TestRepositoryGeneration.RepositoryInterfaces;


namespace TestRepositoryGeneration
{
	public partial class EmployeesInRolesScheduleRepository : TestRepositoryGeneration.Infrastructure.RepositoryBase, TestRepositoryGeneration.RepositoryInterfaces.IEmployeesInRolesScheduleRepository
	{
		private const string Fields = @"archive.employees_in_roles_schedule.schedule_id,archive.employees_in_roles_schedule.role_id,archive.employees_in_roles_schedule.user_id,archive.employees_in_roles_schedule.store_id,archive.employees_in_roles_schedule.business_day_number,archive.employees_in_roles_schedule.start,archive.employees_in_roles_schedule.end,archive.employees_in_roles_schedule.is_deleted";
		private const string SelectAllQuery = @"SELECT archive.employees_in_roles_schedule.schedule_id,archive.employees_in_roles_schedule.role_id,archive.employees_in_roles_schedule.user_id,archive.employees_in_roles_schedule.store_id,archive.employees_in_roles_schedule.business_day_number,archive.employees_in_roles_schedule.start,archive.employees_in_roles_schedule.end,archive.employees_in_roles_schedule.is_deleted FROM archive.employees_in_roles_schedule  {whereTenantId:archive.employees_in_roles_schedule} ";
		private const string SelectByQuery = @"SELECT archive.employees_in_roles_schedule.schedule_id,archive.employees_in_roles_schedule.role_id,archive.employees_in_roles_schedule.user_id,archive.employees_in_roles_schedule.store_id,archive.employees_in_roles_schedule.business_day_number,archive.employees_in_roles_schedule.start,archive.employees_in_roles_schedule.end,archive.employees_in_roles_schedule.is_deleted FROM archive.employees_in_roles_schedule ";
		private const string InsertQuery = @"INSERT INTO archive.employees_in_roles_schedule(archive.employees_in_roles_schedule.role_id,archive.employees_in_roles_schedule.user_id,archive.employees_in_roles_schedule.store_id,archive.employees_in_roles_schedule.business_day_number,archive.employees_in_roles_schedule.start,archive.employees_in_roles_schedule.end,archive.employees_in_roles_schedule.is_deleted,archive.employees_in_roles_schedule.tenant_id) OUTPUT INSERTED.ScheduleId VALUES(@RoleId,@UserId,@StoreId,@BusinessDayNumber,@Start,@End,@IsDeleted,@TenantId) ";
		private const string UpdateQueryBy = @"UPDATE archive.employees_in_roles_schedule SET archive.employees_in_roles_schedule.role_id = @RoleId,archive.employees_in_roles_schedule.user_id = @UserId,archive.employees_in_roles_schedule.store_id = @StoreId,archive.employees_in_roles_schedule.business_day_number = @BusinessDayNumber,archive.employees_in_roles_schedule.start = @Start,archive.employees_in_roles_schedule.end = @End,archive.employees_in_roles_schedule.is_deleted = @IsDeleted FROM archive.employees_in_roles_schedule ";
		private const string DeleteQueryBy = @"UPDATE archive.employees_in_roles_schedule SET is_deleted = TRUE ";
		private const string UpsertQuery = @"INSERT INTO archive.employees_in_roles_schedule(archive.employees_in_roles_schedule.role_id,archive.employees_in_roles_schedule.user_id,archive.employees_in_roles_schedule.store_id,archive.employees_in_roles_schedule.business_day_number,archive.employees_in_roles_schedule.start,archive.employees_in_roles_schedule.end,archive.employees_in_roles_schedule.is_deleted,archive.employees_in_roles_schedule.tenant_id) OUTPUT INSERTED.ScheduleId VALUES(@RoleId,@UserId,@StoreId,@BusinessDayNumber,@Start,@End,@IsDeleted,@TenantId)  ON CONFLICT (schedule_id) DO UPDATE archive.employees_in_roles_schedule SET archive.employees_in_roles_schedule.role_id = @RoleId,archive.employees_in_roles_schedule.user_id = @UserId,archive.employees_in_roles_schedule.store_id = @StoreId,archive.employees_in_roles_schedule.business_day_number = @BusinessDayNumber,archive.employees_in_roles_schedule.start = @Start,archive.employees_in_roles_schedule.end = @End,archive.employees_in_roles_schedule.is_deleted = @IsDeleted ";
		private const string WhereQueryByScheduleId = "WHERE archive.employees_in_roles_schedule.schedule_id = @ScheduleId{andTenantId:archive.employees_in_roles_schedule} ";
		private const string AndWithIsDeletedFilter = "AND archive.employees_in_roles_schedule.is_deleted = @IsDeleted ";
		private const string WhereWithIsDeletedFilter = "WHERE archive.employees_in_roles_schedule.is_deleted = @IsDeleted{andTenantId:archive.employees_in_roles_schedule} ";


		public EmployeesInRolesScheduleRepository(TestRepositoryGeneration.Infrastructure.IDataAccessService dataAccessService) : base(dataAccessService) { }
		/*
		public IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule> GetAll(bool? isDeleted = false)
		{
		var sql = SelectAllQuery;
		object parameters = new {isDeleted};
		if (isDeleted.HasValue)
		{
		sql = sql + AndWithIsDeletedFilter;
		}
		var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>(sql, parameters).ToList();
		return result.ToList();
		}
		public async Task<IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>> GetAllAsync(bool? isDeleted = false)
		{
		var sql = SelectAllQuery;
		object parameters = new {isDeleted};
		if (isDeleted.HasValue)
		{
		sql = sql + AndWithIsDeletedFilter;
		}
		var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>(sql, parameters));
		return result.ToList();
		}

		*/
		public TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule GetByScheduleId(System.Guid scheduleId, bool? isDeleted = false)
		{
			object parameters = new { scheduleId, isDeleted };
			var sql = SelectByQuery + WhereQueryByScheduleId;
			if (isDeleted.HasValue)
			{
				sql = sql + AndWithIsDeletedFilter;
			}
			var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>(sql, parameters);
			return result.FirstOrDefault();
		}
		public async Task<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule> GetByScheduleIdAsync(System.Guid scheduleId, bool? isDeleted = false)
		{
			object parameters = new { scheduleId, isDeleted };
			var sql = SelectByQuery + WhereQueryByScheduleId;
			if (isDeleted.HasValue)
			{
				sql = sql + AndWithIsDeletedFilter;
			}
			var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>(sql, parameters));
			return result.FirstOrDefault();
		}


		public System.Guid Insert(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
			var res = DataAccessService.InsertObject(employeesInRolesSchedule, InsertQuery);
			return (System.Guid)res;
		}
		public async Task<System.Guid> InsertAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
			var res = await DataAccessService.InsertObjectAsync(employeesInRolesSchedule, InsertQuery);
			return (System.Guid)res;
		}

		/*
		public void UpdateByScheduleId(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
		var sql = UpdateQueryBy + WhereQueryByScheduleId; 
		DataAccessService.PersistObject(employeesInRolesSchedule, sql);
		}
		public async Task UpdateByScheduleIdAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
		var sql = UpdateQueryBy + WhereQueryByScheduleId; 
		await DataAccessService.PersistObjectAsync(employeesInRolesSchedule, sql);
		}


		*/
		public void InsertOrUpdate(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
			DataAccessService.ExecuteScalar(UpsertQuery, employeesInRolesSchedule);
		}
		public async Task InsertOrUpdateAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
			await DataAccessService.ExecuteScalarAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>(UpsertQuery, employeesInRolesSchedule);
		}

		/*
		public void RemoveByScheduleId(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
		var sql = DeleteQueryBy + WhereQueryByScheduleId; 
		DataAccessService.PersistObject(employeesInRolesSchedule, sql);
		}
		public async Task RemoveByScheduleIdAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule employeesInRolesSchedule)
		{
		var sql = DeleteQueryBy + WhereQueryByScheduleId; 
		await DataAccessService.PersistObjectAsync(employeesInRolesSchedule, sql);
		}

		public void RemoveByScheduleId(System.Guid scheduleId)
		{
		object parameters = new {scheduleId};
		var sql = DeleteQueryBy + WhereQueryByScheduleId; 
		DataAccessService.PersistObject<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>(sql, parameters);
		}
		public async Task RemoveByScheduleIdAsync(System.Guid scheduleId)
		{
		object parameters = new {scheduleId};
		var sql = DeleteQueryBy + WhereQueryByScheduleId; 
		await DataAccessService.PersistObjectAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.EmployeesInRolesSchedule>(sql, parameters);
		}


		*/

	}
}
