//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using TestRepositoryGeneration.RepositoryInterfaces;


namespace TestRepositoryGeneration
{
	public partial class AvailabilityRepository : TestRepositoryGeneration.Infrastructure.RepositoryBase, TestRepositoryGeneration.RepositoryInterfaces.IAvailabilityRepository
	{
		private const string Fields = @"[Availability].[AvailabilityId],[Availability].[Id],[Availability].[TimeFrom],[Availability].[TimeTo],[Availability].[Count],[Availability].[Number]";
		private const string SelectAllQuery = @"SELECT [Availability].[AvailabilityId],[Availability].[Id],[Availability].[TimeFrom],[Availability].[TimeTo],[Availability].[Count],[Availability].[Number] FROM [Availability]  {whereTenantId:[Availability]} ";
		private const string SelectByQuery = @"SELECT [Availability].[AvailabilityId],[Availability].[Id],[Availability].[TimeFrom],[Availability].[TimeTo],[Availability].[Count],[Availability].[Number] FROM [Availability] ";
		private const string InsertQuery = @"INSERT INTO [Availability]([Availability].[AvailabilityId],[Availability].[Id],[Availability].[TimeFrom],[Availability].[TimeTo],[Availability].[Count],[Availability].[Number],[Availability].[TenantId]) OUTPUT INSERTED.AvailabilityId VALUES(@AvailabilityId,@Id,@TimeFrom,@TimeTo,@Count,@Number,@TenantId) ";
		private const string UpdateQueryBy = @"UPDATE [Availability] SET [Availability].[AvailabilityId] = @AvailabilityId,[Availability].[Id] = @Id,[Availability].[TimeFrom] = @TimeFrom,[Availability].[TimeTo] = @TimeTo,[Availability].[Count] = @Count,[Availability].[Number] = @Number FROM [Availability] ";
		private const string DeleteQueryBy = @"DELETE FROM [Availability] ";
		private const string InsertOrUpdateQuery = @"UPDATE [Availability] SET [Availability].[AvailabilityId] = @AvailabilityId,[Availability].[Id] = @Id,[Availability].[TimeFrom] = @TimeFrom,[Availability].[TimeTo] = @TimeTo,[Availability].[Count] = @Count,[Availability].[Number] = @Number FROM [Availability]  WHERE [Availability].[AvailabilityId] = @AvailabilityId{andTenantId:[Availability]}  IF @@ROWCOUNT = 0 BEGIN INSERT INTO [Availability]([Availability].[AvailabilityId],[Availability].[Id],[Availability].[TimeFrom],[Availability].[TimeTo],[Availability].[Count],[Availability].[Number],[Availability].[TenantId]) OUTPUT INSERTED.AvailabilityId VALUES(@AvailabilityId,@Id,@TimeFrom,@TimeTo,@Count,@Number,@TenantId)  END";
		private const string WhereQueryByAvailabilityId = "WHERE [Availability].[AvailabilityId] = @AvailabilityId{andTenantId:[Availability]} ";
		private const string InsertManyQueryTemplate = @"INSERT INTO [Availability]([Availability].[AvailabilityId],[Availability].[Id],[Availability].[TimeFrom],[Availability].[TimeTo],[Availability].[Count],[Availability].[Number],[Availability].[TenantId]) OUTPUT INSERTED.AvailabilityId VALUES {0}";
		private const string InsertManyValuesTemplate = @"({0},{1},{2},{3},{4},{5},@TenantId)";
		private const string NoCheckConstraint = @"ALTER TABLE [Availability] NOCHECK CONSTRAINT ALL";
		private const string CheckConstraint = @"ALTER TABLE [Availability] CHECK CONSTRAINT ALL";



		public AvailabilityRepository(TestRepositoryGeneration.Infrastructure.IDataAccessService dataAccessService, TestRepositoryGeneration.Infrastructure.IDataAccessController dataAccessController) : base(dataAccessService, dataAccessController) { }
		/*
		public IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.Availability> GetAll()
		{
		var sql = SelectAllQuery;
		object parameters = null;
		var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.BaseRepositories.Availability>(sql, parameters).ToList();
		return result.ToList();
		}
		public async Task<IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.Availability>> GetAllAsync()
		{
		var sql = SelectAllQuery;
		object parameters = null;
		var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.Availability>(sql, parameters));
		return result.ToList();
		}

		*/
		/*
		public IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.Availability> GetByAvailabilityId(System.Guid availabilityId)
		{
		object parameters = new {availabilityId};
		var sql = SelectByQuery + WhereQueryByAvailabilityId;
		var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.BaseRepositories.Availability>(sql, parameters);
		return result.ToList();
		}
		public async Task<IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.Availability>> GetByAvailabilityIdAsync(System.Guid availabilityId)
		{
		object parameters = new {availabilityId};
		var sql = SelectByQuery + WhereQueryByAvailabilityId;
		var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.Availability>(sql, parameters));
		return result.ToList();
		}


		*/
		/*
		public void Insert(TestRepositoryGeneration.DataObjects.BaseRepositories.Availability availability)
		{
		DataAccessService.InsertObject(availability,InsertQuery);
		}
		public async Task InsertAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.Availability availability)
		{
		await DataAccessService.InsertObjectAsync(availability,InsertQuery);
		}

		*/
		public void InsertMany(IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.Availability> availabilityList)
		{
			if (availabilityList == null) throw new ArgumentException(nameof(availabilityList));

			if (!availabilityList.Any()) return;

			var maxInsertManyRows = MaxInsertManyRows;
			var values = new System.Text.StringBuilder();
			var query = new System.Text.StringBuilder();
			var parameters = new Dictionary<string, object>();

			var itemsPerRequest = availabilityList.Select((x, i) => new { Index = i, Value = x })
							.GroupBy(x => x.Index / maxInsertManyRows)
							.Select(x => x.Select((v, i) => new { Index = i, Value = v.Value }).ToList())
							.ToList();

			DataAccessService.Execute(NoCheckConstraint);

			parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
			foreach (var items in itemsPerRequest)
			{
				foreach (var item in items)
				{
					var availability = item.Value;
					var index = item.Index;
					values.AppendLine(index != 0 ? "," : "");
					values.AppendFormat(InsertManyValuesTemplate, $"'{availability.AvailabilityId}'", availability.Id != null ? $"'{availability.Id}'" : "NULL", availability.TimeFrom != null ? $"'{availability.TimeFrom}'" : "NULL", $"'{availability.TimeTo}'", availability.Count, availability.Number?.ToString() ?? "NULL", index);
				}
				query.AppendFormat(InsertManyQueryTemplate, values.ToString());
				DataAccessService.Execute(query.ToString(), parameters);
			}

			DataAccessService.Execute(CheckConstraint);

		}

		public async Task InsertManyAsync(IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.Availability> availabilityList)
		{
			if (availabilityList == null) throw new ArgumentException(nameof(availabilityList));

			if (!availabilityList.Any()) return;

			var maxInsertManyRows = MaxInsertManyRows;
			var values = new System.Text.StringBuilder();
			var query = new System.Text.StringBuilder();
			var parameters = new Dictionary<string, object>();

			var itemsPerRequest = availabilityList.Select((x, i) => new { Index = i, Value = x })
							.GroupBy(x => x.Index / maxInsertManyRows)
							.Select(x => x.Select((v, i) => new { Index = i, Value = v.Value }).ToList())
							.ToList();

			await Task.Delay(10);
			await DataAccessService.ExecuteAsync(NoCheckConstraint);

			parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
			foreach (var items in itemsPerRequest)
			{
				foreach (var item in items)
				{
					var availability = item.Value;
					var index = item.Index;
					values.AppendLine(index != 0 ? "," : "");
					values.AppendFormat(InsertManyValuesTemplate, $"'{availability.AvailabilityId}'", availability.Id != null ? $"'{availability.Id}'" : "NULL", availability.TimeFrom != null ? $"'{availability.TimeFrom}'" : "NULL", $"'{availability.TimeTo}'", availability.Count, availability.Number?.ToString() ?? "NULL", index);
				}
				query.AppendFormat(InsertManyQueryTemplate, values.ToString());
				await Task.Delay(10);
				await DataAccessService.ExecuteAsync(query.ToString(), parameters);
			}

			await Task.Delay(10);
			await DataAccessService.ExecuteAsync(CheckConstraint);

		}


		/*
		public void UpdateByAvailabilityId(TestRepositoryGeneration.DataObjects.BaseRepositories.Availability availability)
		{
		var sql = UpdateQueryBy + WhereQueryByAvailabilityId; 
		DataAccessService.PersistObject(availability, sql);
		}
		public async Task UpdateByAvailabilityIdAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.Availability availability)
		{
		var sql = UpdateQueryBy + WhereQueryByAvailabilityId; 
		await DataAccessService.PersistObjectAsync(availability, sql);
		}


		*/
		/*
		public void RemoveByAvailabilityId(TestRepositoryGeneration.DataObjects.BaseRepositories.Availability availability)
		{
		var sql = DeleteQueryBy + WhereQueryByAvailabilityId; 
		DataAccessService.PersistObject(availability, sql);
		}
		public async Task RemoveByAvailabilityIdAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.Availability availability)
		{
		var sql = DeleteQueryBy + WhereQueryByAvailabilityId; 
		await DataAccessService.PersistObjectAsync(availability, sql);
		}

		public void RemoveByAvailabilityId(System.Guid availabilityId)
		{
		object parameters = new {availabilityId};
		var sql = DeleteQueryBy + WhereQueryByAvailabilityId; 
		DataAccessService.PersistObject<TestRepositoryGeneration.DataObjects.BaseRepositories.Availability>(sql, parameters);
		}
		public async Task RemoveByAvailabilityIdAsync(System.Guid availabilityId)
		{
		object parameters = new {availabilityId};
		var sql = DeleteQueryBy + WhereQueryByAvailabilityId; 
		await DataAccessService.PersistObjectAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.Availability>(sql, parameters);
		}


		*/
		/*
		public void InsertOrUpdate(TestRepositoryGeneration.DataObjects.BaseRepositories.Availability availability)
		{
		DataAccessService.ExecuteScalar(InsertOrUpdateQuery,availability);
		}
		public async Task InsertOrUpdateAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.Availability availability)
		{
		await DataAccessService.ExecuteScalarAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.Availability >(InsertOrUpdateQuery,availability);
		}

		*/

	}
}
