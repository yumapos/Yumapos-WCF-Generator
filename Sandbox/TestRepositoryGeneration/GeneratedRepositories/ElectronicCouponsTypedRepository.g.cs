//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Globalization;
using TestRepositoryGeneration.RepositoryInterfaces;


namespace TestRepositoryGeneration.CustomRepositories.BaseRepositories
{
	public partial class ElectronicCouponsTypedRepository : TestRepositoryGeneration.Infrastructure.RepositoryBase, TestRepositoryGeneration.RepositoryInterfaces.IElectronicCouponsTypedRepository
	{
		public const string Fields = @"[ElectronicCouponsTyped].[ElectronicCouponsId],[ElectronicCouponsTyped].[ElectronicCouponsPresetId],[ElectronicCouponsTyped].[IsPromotionalCampaign]";
		private const string SelectAllQuery = @"SELECT [ElectronicCouponsTyped].[ElectronicCouponsId],[ElectronicCouponsTyped].[ElectronicCouponsPresetId],[ElectronicCouponsTyped].[IsPromotionalCampaign],[ElectronicCoupons].[Id],[ElectronicCoupons].[Name],[ElectronicCoupons].[PrintText],[ElectronicCoupons].[ImageId],[ElectronicCoupons].[ValidFrom],[ElectronicCoupons].[ValidTo],[ElectronicCoupons].[IsDeleted],[ElectronicCoupons].[LimitPerOrder],[ElectronicCoupons].[Priority],[ElectronicCoupons].[MaxTimesPerCustomer],[ElectronicCoupons].[IsActive] FROM [ElectronicCouponsTyped] INNER JOIN [ElectronicCoupons] ON [ElectronicCouponsTyped].[ElectronicCouponsId] = [ElectronicCoupons].[Id]  {whereTenantId:[ElectronicCouponsTyped]} ";
		private const string SelectByQuery = @"SELECT [ElectronicCouponsTyped].[ElectronicCouponsId],[ElectronicCouponsTyped].[ElectronicCouponsPresetId],[ElectronicCouponsTyped].[IsPromotionalCampaign],[ElectronicCoupons].[Id],[ElectronicCoupons].[Name],[ElectronicCoupons].[PrintText],[ElectronicCoupons].[ImageId],[ElectronicCoupons].[ValidFrom],[ElectronicCoupons].[ValidTo],[ElectronicCoupons].[IsDeleted],[ElectronicCoupons].[LimitPerOrder],[ElectronicCoupons].[Priority],[ElectronicCoupons].[MaxTimesPerCustomer],[ElectronicCoupons].[IsActive] FROM [ElectronicCouponsTyped] INNER JOIN [ElectronicCoupons] ON [ElectronicCouponsTyped].[ElectronicCouponsId] = [ElectronicCoupons].[Id] ";
		private const string InsertQuery = @"DECLARE @TempTable TABLE (Id int);INSERT INTO [ElectronicCoupons]([ElectronicCoupons].[Name],[ElectronicCoupons].[PrintText],[ElectronicCoupons].[ImageId],[ElectronicCoupons].[ValidFrom],[ElectronicCoupons].[ValidTo],[ElectronicCoupons].[IsDeleted],[ElectronicCoupons].[LimitPerOrder],[ElectronicCoupons].[Priority],[ElectronicCoupons].[MaxTimesPerCustomer],[ElectronicCoupons].[IsActive],[ElectronicCoupons].[TenantId]) OUTPUT INSERTED.Id INTO @TempTable VALUES(@Name,@PrintText,@ImageId,@ValidFrom,@ValidTo,@IsDeleted,@LimitPerOrder,@Priority,@MaxTimesPerCustomer,@IsActive,@TenantId);DECLARE @TempId int; SELECT @TempId = Id FROM @TempTable;INSERT INTO [ElectronicCouponsTyped]([ElectronicCouponsTyped].[ElectronicCouponsId],[ElectronicCouponsTyped].[ElectronicCouponsPresetId],[ElectronicCouponsTyped].[IsPromotionalCampaign],[ElectronicCouponsTyped].[TenantId]) OUTPUT INSERTED.ElectronicCouponsId INTO @TempTable VALUES(@TempId,@ElectronicCouponsPresetId,@IsPromotionalCampaign,@TenantId);SELECT Id FROM @TempTable;";
		private const string UpdateQueryBy = @"UPDATE [ElectronicCouponsTyped] SET [ElectronicCouponsTyped].[ElectronicCouponsPresetId] = @ElectronicCouponsPresetId,[ElectronicCouponsTyped].[IsPromotionalCampaign] = @IsPromotionalCampaign FROM [ElectronicCouponsTyped] ";
		private const string DeleteQueryBy = @"UPDATE [ElectronicCoupons] SET IsDeleted = 1 ";
		private const string InsertOrUpdateQuery = @"UPDATE [ElectronicCouponsTyped] SET [ElectronicCouponsTyped].[ElectronicCouponsPresetId] = @ElectronicCouponsPresetId,[ElectronicCouponsTyped].[IsPromotionalCampaign] = @IsPromotionalCampaign FROM [ElectronicCouponsTyped]  WHERE [ElectronicCouponsTyped].[ElectronicCouponsId] = @ElectronicCouponsId{andTenantId:[ElectronicCouponsTyped]}  IF @@ROWCOUNT = 0 BEGIN DECLARE @TempTable TABLE (Id int);INSERT INTO [ElectronicCoupons]([ElectronicCoupons].[Name],[ElectronicCoupons].[PrintText],[ElectronicCoupons].[ImageId],[ElectronicCoupons].[ValidFrom],[ElectronicCoupons].[ValidTo],[ElectronicCoupons].[IsDeleted],[ElectronicCoupons].[LimitPerOrder],[ElectronicCoupons].[Priority],[ElectronicCoupons].[MaxTimesPerCustomer],[ElectronicCoupons].[IsActive],[ElectronicCoupons].[TenantId]) OUTPUT INSERTED.Id INTO @TempTable VALUES(@Name,@PrintText,@ImageId,@ValidFrom,@ValidTo,@IsDeleted,@LimitPerOrder,@Priority,@MaxTimesPerCustomer,@IsActive,@TenantId);DECLARE @TempId int; SELECT @TempId = Id FROM @TempTable;INSERT INTO [ElectronicCouponsTyped]([ElectronicCouponsTyped].[ElectronicCouponsId],[ElectronicCouponsTyped].[ElectronicCouponsPresetId],[ElectronicCouponsTyped].[IsPromotionalCampaign],[ElectronicCouponsTyped].[TenantId]) OUTPUT INSERTED.ElectronicCouponsId INTO @TempTable VALUES(@TempId,@ElectronicCouponsPresetId,@IsPromotionalCampaign,@TenantId);SELECT Id FROM @TempTable; END";
		private const string UpdateManyByElectronicCouponsIdQueryTemplate = @"UPDATE [ElectronicCouponsTyped] SET ElectronicCouponsPresetId = '{1}',IsPromotionalCampaign = '{2}' WHERE [ElectronicCouponsTyped].[ElectronicCouponsId] = @ElectronicCouponsId{0}{{andTenantId:[ElectronicCouponsTyped]}}";
		private const string UpdateQueryJoin = "UPDATE [ElectronicCoupons] SET [ElectronicCoupons].[Name] = @Name,[ElectronicCoupons].[PrintText] = @PrintText,[ElectronicCoupons].[ImageId] = @ImageId,[ElectronicCoupons].[ValidFrom] = @ValidFrom,[ElectronicCoupons].[ValidTo] = @ValidTo,[ElectronicCoupons].[IsDeleted] = @IsDeleted,[ElectronicCoupons].[LimitPerOrder] = @LimitPerOrder,[ElectronicCoupons].[Priority] = @Priority,[ElectronicCoupons].[MaxTimesPerCustomer] = @MaxTimesPerCustomer,[ElectronicCoupons].[IsActive] = @IsActive FROM [ElectronicCoupons] ";
		private const string UpdateManyByIdJoinedQueryTemplate = @"UPDATE [ElectronicCoupons] SET Id = '{1}',Name = @Name{0},PrintText = @PrintText{0},ImageId = '{2}',ValidFrom = '{3}',ValidTo = '{4}',IsDeleted = '{5}',LimitPerOrder = '{6}',Priority = '{7}',MaxTimesPerCustomer = '{8}',IsActive = '{9}' WHERE [ElectronicCouponsTyped].[Id] = @Id{0}{{andTenantId:[ElectronicCouponsTyped]}}";
		private const string SelectIntoTempTable = @"DECLARE @Temp TABLE (ItemId uniqueidentifier);INSERT INTO @Temp SELECT [ElectronicCouponsTyped].[ElectronicCouponsId] FROM [ElectronicCouponsTyped] ";
		private const string WhereQueryByElectronicCouponsId = "WHERE [ElectronicCouponsTyped].[ElectronicCouponsId] = @ElectronicCouponsId{andTenantId:[ElectronicCouponsTyped]} ";
		private const string WhereQueryByJoinPk = "WHERE [ElectronicCoupons].[Id] = @Id{andTenantId:[ElectronicCoupons]} ";
		private const string AndWithIsDeletedFilter = "AND [ElectronicCoupons].[IsDeleted] = @IsDeleted ";
		private const string WhereWithIsDeletedFilter = "WHERE [ElectronicCouponsTyped].[IsDeleted] = @IsDeleted{andTenantId:[ElectronicCouponsTyped]} ";
		private const string InsertManyQueryTemplate = @"INSERT INTO [ElectronicCoupons]([ElectronicCoupons].[Name],[ElectronicCoupons].[PrintText],[ElectronicCoupons].[ImageId],[ElectronicCoupons].[ValidFrom],[ElectronicCoupons].[ValidTo],[ElectronicCoupons].[IsDeleted],[ElectronicCoupons].[LimitPerOrder],[ElectronicCoupons].[Priority],[ElectronicCoupons].[MaxTimesPerCustomer],[ElectronicCoupons].[IsActive],[ElectronicCoupons].[TenantId])  VALUES {0};INSERT INTO [ElectronicCouponsTyped]([ElectronicCouponsTyped].[ElectronicCouponsId],[ElectronicCouponsTyped].[ElectronicCouponsPresetId],[ElectronicCouponsTyped].[IsPromotionalCampaign],[ElectronicCouponsTyped].[TenantId])  VALUES {1}";
		private const string InsertManyValuesTemplate = @"('{1}','{2}','{3}',@TenantId)";
		private const string InsertManyJoinedValuesTemplate = @"('{1}',@Name{0},@PrintText{0},'{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}',@TenantId)";



		public ElectronicCouponsTypedRepository(TestRepositoryGeneration.Infrastructure.IDataAccessService dataAccessService, TestRepositoryGeneration.Infrastructure.IDataAccessController dataAccessController) : base(dataAccessService, dataAccessController) { }
		public IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped> GetAll(bool? isDeleted = false)
		{
			var sql = SelectAllQuery;
			object parameters = new { isDeleted };
			if (isDeleted.HasValue)
			{
				sql = sql + AndWithIsDeletedFilter;
			}
			var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped>(sql, parameters).ToList();
			return result.ToList();
		}
		public async Task<IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped>> GetAllAsync(bool? isDeleted = false)
		{
			var sql = SelectAllQuery;
			object parameters = new { isDeleted };
			if (isDeleted.HasValue)
			{
				sql = sql + AndWithIsDeletedFilter;
			}
			var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped>(sql, parameters));
			return result.ToList();
		}

		/*
		public IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped> GetByElectronicCouponsId(int electronicCouponsId, bool? isDeleted = false)
		{
		object parameters = new {electronicCouponsId, isDeleted};
		var sql = SelectByQuery + WhereQueryByElectronicCouponsId;
		if (isDeleted.HasValue)
		{
		sql = sql + AndWithIsDeletedFilter;
		}
		var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped>(sql, parameters);
		return result.ToList();
		}
		public async Task<IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped>> GetByElectronicCouponsIdAsync(int electronicCouponsId, bool? isDeleted = false)
		{
		object parameters = new {electronicCouponsId, isDeleted};
		var sql = SelectByQuery + WhereQueryByElectronicCouponsId;
		if (isDeleted.HasValue)
		{
		sql = sql + AndWithIsDeletedFilter;
		}
		var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped>(sql, parameters));
		return result.ToList();
		}


		*/
		/*
		public void Insert(TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped electronicCouponsTyped)
		{
		DataAccessService.InsertObject(electronicCouponsTyped,InsertQuery);
		}
		public async Task InsertAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped electronicCouponsTyped)
		{
		await DataAccessService.InsertObjectAsync(electronicCouponsTyped,InsertQuery);
		}

		*/
		public void InsertMany(IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped> electronicCouponsTypedList)
		{
			if (electronicCouponsTypedList == null) throw new ArgumentException(nameof(electronicCouponsTypedList));

			if (!electronicCouponsTypedList.Any()) return;

			var maxInsertManyRowsWithParameters = MaxRepositoryParams / 3;
			var maxInsertManyRows = maxInsertManyRowsWithParameters < MaxInsertManyRows
																	? maxInsertManyRowsWithParameters
																	: MaxInsertManyRows;
			var values = new System.Text.StringBuilder();
			var joinedValues = new System.Text.StringBuilder();
			var query = new System.Text.StringBuilder();
			var parameters = new Dictionary<string, object>();

			var itemsPerRequest = electronicCouponsTypedList.Select((x, i) => new { Index = i, Value = x })
							.GroupBy(x => x.Index / maxInsertManyRows)
							.Select(x => x.Select((v, i) => new { Index = i, Value = v.Value }).ToList())
							.ToList();


			foreach (var items in itemsPerRequest)
			{
				parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
				foreach (var item in items)
				{
					var electronicCouponsTyped = item.Value;
					var index = item.Index;
					parameters.Add($"Name{index}", electronicCouponsTyped.Name);
					parameters.Add($"PrintText{index}", electronicCouponsTyped.PrintText);
					values.AppendLine(index != 0 ? "," : "");
					values.AppendFormat(InsertManyValuesTemplate, index, electronicCouponsTyped.ElectronicCouponsId, electronicCouponsTyped.ElectronicCouponsPresetId, electronicCouponsTyped.IsPromotionalCampaign ? 1 : 0);
					joinedValues.AppendLine(index != 0 ? "," : "");
					joinedValues.AppendFormat(InsertManyJoinedValuesTemplate, index, electronicCouponsTyped.Id, electronicCouponsTyped.ImageId?.ToString() ?? "NULL", electronicCouponsTyped.ValidFrom?.ToString(CultureInfo.InvariantCulture) ?? "NULL", electronicCouponsTyped.ValidTo?.ToString(CultureInfo.InvariantCulture) ?? "NULL", (electronicCouponsTyped.IsDeleted != null ? (electronicCouponsTyped.IsDeleted.Value ? 1 : 0).ToString() : null) ?? "NULL", electronicCouponsTyped.LimitPerOrder?.ToString() ?? "NULL", electronicCouponsTyped.Priority?.ToString() ?? "NULL", electronicCouponsTyped.MaxTimesPerCustomer?.ToString() ?? "NULL", electronicCouponsTyped.IsActive ? 1 : 0);
				}
				query.AppendFormat(InsertManyQueryTemplate, joinedValues.Replace("'NULL'", "NULL").ToString(), values.Replace("'NULL'", "NULL").ToString());
				DataAccessService.Execute(query.ToString(), parameters);
				parameters.Clear();
				values.Clear();
				joinedValues.Clear();
				query.Clear();
			}


		}

		public async Task InsertManyAsync(IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped> electronicCouponsTypedList)
		{
			if (electronicCouponsTypedList == null) throw new ArgumentException(nameof(electronicCouponsTypedList));

			if (!electronicCouponsTypedList.Any()) return;

			var maxInsertManyRowsWithParameters = MaxRepositoryParams / 3;
			var maxInsertManyRows = maxInsertManyRowsWithParameters < MaxInsertManyRows
																	? maxInsertManyRowsWithParameters
																	: MaxInsertManyRows;
			var values = new System.Text.StringBuilder();
			var joinedValues = new System.Text.StringBuilder();
			var query = new System.Text.StringBuilder();
			var parameters = new Dictionary<string, object>();

			var itemsPerRequest = electronicCouponsTypedList.Select((x, i) => new { Index = i, Value = x })
							.GroupBy(x => x.Index / maxInsertManyRows)
							.Select(x => x.Select((v, i) => new { Index = i, Value = v.Value }).ToList())
							.ToList();

			await Task.Delay(10);

			foreach (var items in itemsPerRequest)
			{
				parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
				foreach (var item in items)
				{
					var electronicCouponsTyped = item.Value;
					var index = item.Index;
					parameters.Add($"Name{index}", electronicCouponsTyped.Name);
					parameters.Add($"PrintText{index}", electronicCouponsTyped.PrintText);
					values.AppendLine(index != 0 ? "," : "");
					values.AppendFormat(InsertManyValuesTemplate, index, electronicCouponsTyped.ElectronicCouponsId, electronicCouponsTyped.ElectronicCouponsPresetId, electronicCouponsTyped.IsPromotionalCampaign ? 1 : 0);
					joinedValues.AppendLine(index != 0 ? "," : "");
					joinedValues.AppendFormat(InsertManyJoinedValuesTemplate, index, electronicCouponsTyped.Id, electronicCouponsTyped.ImageId?.ToString() ?? "NULL", electronicCouponsTyped.ValidFrom?.ToString(CultureInfo.InvariantCulture) ?? "NULL", electronicCouponsTyped.ValidTo?.ToString(CultureInfo.InvariantCulture) ?? "NULL", (electronicCouponsTyped.IsDeleted != null ? (electronicCouponsTyped.IsDeleted.Value ? 1 : 0).ToString() : null) ?? "NULL", electronicCouponsTyped.LimitPerOrder?.ToString() ?? "NULL", electronicCouponsTyped.Priority?.ToString() ?? "NULL", electronicCouponsTyped.MaxTimesPerCustomer?.ToString() ?? "NULL", electronicCouponsTyped.IsActive ? 1 : 0);
				}
				query.AppendFormat(InsertManyQueryTemplate, joinedValues.Replace("'NULL'", "NULL").ToString(), values.Replace("'NULL'", "NULL").ToString());
				await Task.Delay(10);
				await DataAccessService.ExecuteAsync(query.ToString(), parameters);
				parameters.Clear();
				values.Clear();
				joinedValues.Clear();
				query.Clear();
			}

			await Task.Delay(10);

		}


		/*
		public void UpdateByElectronicCouponsId(TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped electronicCouponsTyped)
		{
		var sql = UpdateQueryBy + WhereQueryByElectronicCouponsId + UpdateQueryJoin + WhereQueryByJoinPk; 
		DataAccessService.PersistObject(electronicCouponsTyped, sql);
		}
		public async Task UpdateByElectronicCouponsIdAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped electronicCouponsTyped)
		{
		var sql = UpdateQueryBy + WhereQueryByElectronicCouponsId + UpdateQueryJoin + WhereQueryByJoinPk; 
		await DataAccessService.PersistObjectAsync(electronicCouponsTyped, sql);
		}


		*/
		/*

		public void UpdateManyByElectronicCouponsIdSplitByTransactions(IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped> electronicCouponsTypedList)
		{
		if(electronicCouponsTypedList==null) throw new ArgumentException(nameof(electronicCouponsTypedList));

		if(!electronicCouponsTypedList.Any()) return;

		var maxUpdateManyRowsWithParameters = MaxRepositoryParams / 3;
		var maxUpdateManyRows = maxUpdateManyRowsWithParameters < MaxUpdateManyRows 
																? maxUpdateManyRowsWithParameters
																: MaxUpdateManyRows;
		var query = new System.Text.StringBuilder();
		var parameters = new Dictionary<string, object>();

		var itemsPerRequest = electronicCouponsTypedList.Select((x, i) => new {Index = i,Value = x})
						.GroupBy(x => x.Index / maxUpdateManyRows)
						.Select(x => x.Select((v, i) => new { Index = i, Value = v.Value }).ToList())
						.ToList(); 


		foreach (var items in itemsPerRequest)
		{
		query.AppendLine("BEGIN TRANSACTION");
		parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
		foreach (var item in items)
		{
		var electronicCouponsTyped = item.Value;
		var index = item.Index; 
		parameters.Add($"ElectronicCouponsId{index}", electronicCouponsTyped.ElectronicCouponsId);
		parameters.Add($"Name{index}", electronicCouponsTyped.Name);
		parameters.Add($"PrintText{index}", electronicCouponsTyped.PrintText);
		query.AppendFormat($"{UpdateManyByElectronicCouponsIdQueryTemplate};", index, electronicCouponsTyped.ElectronicCouponsPresetId,electronicCouponsTyped.IsPromotionalCampaign ? 1 : 0);
		query.AppendFormat($"{UpdateManyByIdJoinedQueryTemplate};", index, electronicCouponsTyped.Id,electronicCouponsTyped.ImageId?.ToString() ?? "NULL",electronicCouponsTyped.ValidFrom?.ToString(CultureInfo.InvariantCulture) ?? "NULL",electronicCouponsTyped.ValidTo?.ToString(CultureInfo.InvariantCulture) ?? "NULL",(electronicCouponsTyped.IsDeleted != null ? (electronicCouponsTyped.IsDeleted.Value ? 1 : 0).ToString() : null) ?? "NULL",electronicCouponsTyped.LimitPerOrder?.ToString() ?? "NULL",electronicCouponsTyped.Priority?.ToString() ?? "NULL",electronicCouponsTyped.MaxTimesPerCustomer?.ToString() ?? "NULL",electronicCouponsTyped.IsActive ? 1 : 0);
		}
		query.AppendLine("COMMIT TRANSACTION");
		var fullSqlStatement = DataAccessService.GenerateFullSqlStatement(query.ToString().Replace("'NULL'", "NULL"), typeof(TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped));
		DataAccessService.Execute(fullSqlStatement.ToString(), parameters);
		parameters.Clear();
		query.Clear();
		}


		}

		public async Task UpdateManyByElectronicCouponsIdSplitByTransactionsAsync(IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped> electronicCouponsTypedList)
		{
		if(electronicCouponsTypedList==null) throw new ArgumentException(nameof(electronicCouponsTypedList));

		if(!electronicCouponsTypedList.Any()) return;

		var maxUpdateManyRowsWithParameters = MaxRepositoryParams / 3;
		var maxUpdateManyRows = maxUpdateManyRowsWithParameters < MaxUpdateManyRows 
																? maxUpdateManyRowsWithParameters
																: MaxUpdateManyRows;
		var query = new System.Text.StringBuilder();
		var parameters = new Dictionary<string, object>();

		var itemsPerRequest = electronicCouponsTypedList.Select((x, i) => new {Index = i,Value = x})
						.GroupBy(x => x.Index / maxUpdateManyRows)
						.Select(x => x.Select((v, i) => new { Index = i, Value = v.Value }).ToList())
						.ToList(); 

		await Task.Delay(10);

		foreach (var items in itemsPerRequest)
		{
		query.AppendLine("BEGIN TRANSACTION");
		parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
		foreach (var item in items)
		{
		var electronicCouponsTyped = item.Value;
		var index = item.Index; 
		parameters.Add($"ElectronicCouponsId{index}", electronicCouponsTyped.ElectronicCouponsId);
		parameters.Add($"Name{index}", electronicCouponsTyped.Name);
		parameters.Add($"PrintText{index}", electronicCouponsTyped.PrintText);
		query.AppendFormat($"{UpdateManyByElectronicCouponsIdQueryTemplate};", index, electronicCouponsTyped.ElectronicCouponsPresetId,electronicCouponsTyped.IsPromotionalCampaign ? 1 : 0);
		query.AppendFormat($"{UpdateManyByIdJoinedQueryTemplate};", index, electronicCouponsTyped.Id,electronicCouponsTyped.ImageId?.ToString() ?? "NULL",electronicCouponsTyped.ValidFrom?.ToString(CultureInfo.InvariantCulture) ?? "NULL",electronicCouponsTyped.ValidTo?.ToString(CultureInfo.InvariantCulture) ?? "NULL",(electronicCouponsTyped.IsDeleted != null ? (electronicCouponsTyped.IsDeleted.Value ? 1 : 0).ToString() : null) ?? "NULL",electronicCouponsTyped.LimitPerOrder?.ToString() ?? "NULL",electronicCouponsTyped.Priority?.ToString() ?? "NULL",electronicCouponsTyped.MaxTimesPerCustomer?.ToString() ?? "NULL",electronicCouponsTyped.IsActive ? 1 : 0);
		}
		query.AppendLine("COMMIT TRANSACTION");
		await Task.Delay(10);
		var fullSqlStatement = DataAccessService.GenerateFullSqlStatement(query.ToString().Replace("'NULL'", "NULL"), typeof(TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped));
		await DataAccessService.ExecuteAsync(fullSqlStatement.ToString(), parameters);
		parameters.Clear();
		query.Clear();
		}

		await Task.Delay(10);

		}

		*/
		/*
		public void RemoveByElectronicCouponsId(TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped electronicCouponsTyped)
		{
		var sql = SelectIntoTempTable + WhereQueryByElectronicCouponsId + DeleteQueryBy; 
		DataAccessService.PersistObject(electronicCouponsTyped, sql);
		}
		public async Task RemoveByElectronicCouponsIdAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped electronicCouponsTyped)
		{
		var sql = SelectIntoTempTable + WhereQueryByElectronicCouponsId + DeleteQueryBy; 
		await DataAccessService.PersistObjectAsync(electronicCouponsTyped, sql);
		}

		public void RemoveByElectronicCouponsId(int electronicCouponsId)
		{
		object parameters = new {electronicCouponsId};
		var sql = SelectIntoTempTable + WhereQueryByElectronicCouponsId + DeleteQueryBy; 
		DataAccessService.PersistObject<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped>(sql, parameters);
		}
		public async Task RemoveByElectronicCouponsIdAsync(int electronicCouponsId)
		{
		object parameters = new {electronicCouponsId};
		var sql = SelectIntoTempTable + WhereQueryByElectronicCouponsId + DeleteQueryBy; 
		await DataAccessService.PersistObjectAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped>(sql, parameters);
		}


		*/
		/*
		public void InsertOrUpdate(TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped electronicCouponsTyped)
		{
		DataAccessService.ExecuteScalar(InsertOrUpdateQuery,electronicCouponsTyped);
		}
		public async Task InsertOrUpdateAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped electronicCouponsTyped)
		{
		await DataAccessService.ExecuteScalarAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.ElectronicCouponsTyped >(InsertOrUpdateQuery,electronicCouponsTyped);
		}

		*/

	}
}
