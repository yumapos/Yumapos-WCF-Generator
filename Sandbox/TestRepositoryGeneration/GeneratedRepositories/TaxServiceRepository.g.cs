//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Globalization;


namespace TestRepositoryGeneration
{
	public partial class TaxRepository : TestRepositoryGeneration.RepositoryInterfaces.ITaxRepository
	{
		private TestRepositoryGeneration.Infrastructure.IDataAccessController _dataAccessController;
		private TestRepositoryGeneration.Infrastructure.IDateTimeService _dateTimeService;
		private TestRepositoryGeneration.TaxCacheRepository _taxCacheRepository;
		private TestRepositoryGeneration.TaxVersionRepository _taxVersionRepository;
		private TestRepositoryGeneration.CustomRepositories.VersionsRepositories.MenuItems2TaxesCacheRepository _menuItems2TaxesCacheRepository;
		private TestRepositoryGeneration.CustomRepositories.VersionsRepositories.MenuItems2TaxesVersionRepository _menuItems2TaxesVersionRepository;
		private TestRepositoryGeneration.CustomRepositories.VersionsRepositories.MenuItemCacheRepository _menuItemCacheRepository;


		public TaxRepository(TestRepositoryGeneration.Infrastructure.IDataAccessController dataAccessController,
		TestRepositoryGeneration.Infrastructure.IDataAccessService dataAccessService,
		TestRepositoryGeneration.Infrastructure.IDateTimeService dateTimeService)
		{
			_dataAccessController = dataAccessController;
			_dateTimeService = dateTimeService;
			_taxCacheRepository = new TestRepositoryGeneration.TaxCacheRepository(dataAccessService, dataAccessController);
			_taxVersionRepository = new TestRepositoryGeneration.TaxVersionRepository(dataAccessService, dataAccessController);
			_menuItems2TaxesCacheRepository = new TestRepositoryGeneration.CustomRepositories.VersionsRepositories.MenuItems2TaxesCacheRepository(dataAccessService, dataAccessController);
			_menuItems2TaxesVersionRepository = new TestRepositoryGeneration.CustomRepositories.VersionsRepositories.MenuItems2TaxesVersionRepository(dataAccessService, dataAccessController);
			_menuItemCacheRepository = new TestRepositoryGeneration.CustomRepositories.VersionsRepositories.MenuItemCacheRepository(dataAccessService, dataAccessController);
		}

		/*
		public IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax> GetAll(bool? isDeleted = false)
		{
		return _taxCacheRepository.GetAll(isDeleted);
		}
		public async Task<IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax>> GetAllAsync(bool? isDeleted = false)
		{
		return await _taxCacheRepository.GetAllAsync(isDeleted);
		}

		*/
		public TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax GetByTaxId(int taxId, DateTimeOffset modified, bool? isDeleted = false)
		{
			var result = _taxVersionRepository.GetByTaxId(taxId, modified, isDeleted);
			return result;
		}

		public async Task<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax> GetByTaxIdAsync(int taxId, DateTimeOffset modified, bool? isDeleted = false)
		{
			var result = await _taxVersionRepository.GetByTaxIdAsync(taxId, modified, isDeleted);
			return result;
		}

		public TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax GetByTaxId(int taxId, bool? isDeleted = false)
		{
			var result = _taxCacheRepository.GetByTaxId(taxId, isDeleted);
			return result;
		}

		public async Task<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax> GetByTaxIdAsync(int taxId, bool? isDeleted = false)
		{
			var result = await _taxCacheRepository.GetByTaxIdAsync(taxId, isDeleted);
			return result;
		}


		/*
		public IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax> GetByTaxVersionId(System.Guid taxVersionId, bool? isDeleted = false)
		{
		var result = _taxVersionRepository.GetByTaxVersionId(taxVersionId, isDeleted);
		return result.ToList();
		}

		public async Task<IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax>> GetByTaxVersionIdAsync(System.Guid taxVersionId, bool? isDeleted = false)
		{
		var result = await _taxVersionRepository.GetByTaxVersionIdAsync(taxVersionId, isDeleted);
		return result.ToList();
		}


		*/
		public Guid Insert(TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax tax)
		{
			tax.Modified = _dateTimeService.CurrentDateTimeOffset;
			tax.ModifiedBy = _dataAccessController.EmployeeId.Value;
			tax.TaxVersionId = tax.TaxVersionId == Guid.Empty ? Guid.NewGuid() : tax.TaxVersionId;
			tax.TaxId = 0;
			_taxVersionRepository.Insert(tax);
			_taxCacheRepository.Insert(tax);
			UpdateMenuItems2Taxes(tax);
			return tax.TaxVersionId;
		}
		public async Task<Guid> InsertAsync(TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax tax)
		{
			tax.Modified = _dateTimeService.CurrentDateTimeOffset;
			tax.ModifiedBy = _dataAccessController.EmployeeId.Value;
			tax.TaxVersionId = tax.TaxVersionId == Guid.Empty ? Guid.NewGuid() : tax.TaxVersionId;
			tax.TaxId = 0;
			await _taxVersionRepository.InsertAsync(tax);
			await _taxCacheRepository.InsertAsync(tax);
			UpdateMenuItems2Taxes(tax);
			return tax.TaxVersionId;
		}

		/*
		public IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax> InsertMany(IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax> taxList)
		{
		foreach (var tax in taxList)
		{
		tax.Modified = _dateTimeService.CurrentDateTimeOffset;
		tax.ModifiedBy = _dataAccessController.EmployeeId.Value;
		tax.TaxVersionId = Guid.NewGuid();
		tax.TaxId = 0;
		}
		_taxVersionRepository.InsertMany(taxList);
		_taxCacheRepository.InsertMany(taxList);
		UpdateManyMenuItems2Taxes(taxList);
		return taxList;
		}
		public async Task<IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax>> InsertManyAsync(IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax> taxList)
		{
		foreach (var tax in taxList)
		{
		tax.Modified = _dateTimeService.CurrentDateTimeOffset;
		tax.ModifiedBy = _dataAccessController.EmployeeId.Value;
		tax.TaxVersionId = Guid.NewGuid();
		tax.TaxId = 0;
		}
		await _taxVersionRepository.InsertManyAsync(taxList);
		await _taxCacheRepository.InsertManyAsync(taxList);
		UpdateManyMenuItems2Taxes(taxList);
		return taxList;
		}

		*/
		public void UpdateByTaxId(TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax tax)
		{
			tax.Modified = _dateTimeService.CurrentDateTimeOffset;
			tax.ModifiedBy = _dataAccessController.EmployeeId.Value;
			tax.TaxVersionId = Guid.NewGuid();
			_taxVersionRepository.Insert(tax);
			_taxCacheRepository.UpdateByTaxId(tax);
			UpdateMenuItems2Taxes(tax);
		}
		public async Task UpdateByTaxIdAsync(TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax tax)
		{
			tax.Modified = _dateTimeService.CurrentDateTimeOffset;
			tax.ModifiedBy = _dataAccessController.EmployeeId.Value;
			tax.TaxVersionId = Guid.NewGuid();
			await _taxVersionRepository.InsertAsync(tax);
			await _taxCacheRepository.UpdateByTaxIdAsync(tax);
			UpdateMenuItems2Taxes(tax);
		}

		/*

		public void UpdateManyByTaxIdSplitByTransactions(IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax> taxList)
		{
		foreach (var tax in taxList)
		{
		tax.Modified = _dateTimeService.CurrentDateTimeOffset;
		tax.ModifiedBy = _dataAccessController.EmployeeId.Value;
		tax.TaxVersionId = Guid.NewGuid();
		tax.TaxId = 0;
		}
		_taxVersionRepository.InsertMany(taxList);
		_taxCacheRepository.UpdateManyByTaxIdSplitByTransactions(taxList);
		UpdateManyMenuItems2Taxes(taxList);
		}

		public async Task UpdateManyByTaxIdSplitByTransactionsAsync(IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax> taxList)
		{
		foreach (var tax in taxList)
		{
		tax.Modified = _dateTimeService.CurrentDateTimeOffset;
		tax.ModifiedBy = _dataAccessController.EmployeeId.Value;
		tax.TaxVersionId = Guid.NewGuid();
		tax.TaxId = 0;
		}
		await _taxVersionRepository.InsertManyAsync(taxList);
		await _taxCacheRepository.UpdateManyByTaxIdSplitByTransactionsAsync(taxList);
		UpdateManyMenuItems2Taxes(taxList);
		}

		*/
		private void UpdateMenuItems2Taxes(TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax tax)
		{
			if (tax.MenuItemIds == null)
				tax.MenuItemIds = _menuItems2TaxesCacheRepository.GetByTaxId(tax.TaxId).Select(i => i.MenuItemId);
			var listOfMenuItems2Taxes = tax.MenuItemIds
			.Select(ids => _menuItemCacheRepository.GetByMenuItemId(ids, null))
			.Select(item => new TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes()
			{
				MenuItemId = item.MenuItemId,
				MenuItemVersionId = item.MenuItemVersionId,
				TaxId = tax.TaxId,
				TaxVersionId = tax.TaxVersionId,
			}).ToList();
			_menuItems2TaxesCacheRepository.RemoveByTaxId(tax.TaxId);
			foreach (var mt in listOfMenuItems2Taxes)
			{
				mt.Modified = _dateTimeService.CurrentDateTimeOffset;
				mt.ModifiedBy = tax.ModifiedBy;
				_menuItems2TaxesCacheRepository.Insert(mt);
				_menuItems2TaxesVersionRepository.Insert(mt);
			}
		}
		private void UpdateManyMenuItems2Taxes(IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax> taxList)
		{
			foreach (var tax in taxList)
			{
				UpdateMenuItems2Taxes(tax);
			}
		}

		public void RemoveByTaxId(TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax tax)
		{
			tax.IsDeleted = true;
			UpdateByTaxId(tax);
		}
		public async Task RemoveByTaxIdAsync(TestRepositoryGeneration.DataObjects.VersionsRepositories.Tax tax)
		{
			tax.IsDeleted = true;
			await UpdateByTaxIdAsync(tax);
		}
		public void RemoveByTaxId(int taxId)
		{
			var result = _taxCacheRepository.GetByTaxId(taxId);
			result.IsDeleted = true;
			UpdateByTaxId(result);
		}
		public async Task RemoveByTaxIdAsync(int taxId)
		{
			var result = await _taxCacheRepository.GetByTaxIdAsync(taxId);
			result.IsDeleted = true;
			await UpdateByTaxIdAsync(result);
		}


	}
}
