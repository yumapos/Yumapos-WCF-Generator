//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Globalization;


namespace TestRepositoryGeneration.CustomRepositories.VersionsRepositories
{
	internal class MenuItems2TaxesVersionRepository : TestRepositoryGeneration.Infrastructure.RepositoryBase
	{
		private const string InsertQuery = @"INSERT INTO [MenuItemToTaxVersions]([MenuItems2Taxess].[MenuItemId],[MenuItems2Taxess].[MenuItemVersionId],[MenuItems2Taxess].[Modified],[MenuItems2Taxess].[ModifiedBy],[MenuItems2Taxess].[TaxId],[MenuItems2Taxess].[TaxVersionId],[MenuItems2Taxess].[IsDeleted])
VALUES (@MenuItemId,@MenuItemVersionId,@Modified,@ModifiedBy,@TaxId,@TaxVersionId,@IsDeleted)";
		private const string InsertManyQueryTemplate = @"INSERT INTO [MenuItemToTaxVersions]([MenuItemToTaxVersions].[MenuItemId],[MenuItemToTaxVersions].[MenuItemVersionId],[MenuItemToTaxVersions].[Modified],[MenuItemToTaxVersions].[ModifiedBy],[MenuItemToTaxVersions].[TaxId],[MenuItemToTaxVersions].[TaxVersionId],[MenuItemToTaxVersions].[IsDeleted])  VALUES {0}";
		private const string InsertManyValuesTemplate = @"('{0}','{1}','{2}','{3}','{4}','{5}','{6}')";


		public MenuItems2TaxesVersionRepository(TestRepositoryGeneration.Infrastructure.IDataAccessService dataAccessService, TestRepositoryGeneration.Infrastructure.IDataAccessController dataAccessController) : base(dataAccessService, dataAccessController) { }
		public void Insert(TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes menuItems2Taxes)
		{
			DataAccessService.InsertObject(menuItems2Taxes, InsertQuery);
		}
		public async Task InsertAsync(TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes menuItems2Taxes)
		{
			await DataAccessService.InsertObjectAsync(menuItems2Taxes, InsertQuery);
		}

		public void InsertMany(IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes> menuItems2TaxesList)
		{
			if (menuItems2TaxesList == null) throw new ArgumentException(nameof(menuItems2TaxesList));

			if (!menuItems2TaxesList.Any()) return;

			var maxInsertManyRows = MaxInsertManyRows;
			var values = new System.Text.StringBuilder();
			var query = new System.Text.StringBuilder();
			var parameters = new Dictionary<string, object>();

			var itemsPerRequest = menuItems2TaxesList.Select((x, i) => new { Index = i, Value = x })
							.GroupBy(x => x.Index / maxInsertManyRows)
							.Select(x => x.Select((v, i) => new { Index = i, Value = v.Value }).ToList())
							.ToList();


			foreach (var items in itemsPerRequest)
			{
				foreach (var item in items)
				{
					var menuItems2Taxes = item.Value;
					var index = item.Index;
					values.AppendLine(index != 0 ? "," : "");
					values.AppendFormat(InsertManyValuesTemplate, menuItems2Taxes.MenuItemId, menuItems2Taxes.MenuItemVersionId, menuItems2Taxes.Modified.ToString(CultureInfo.InvariantCulture), menuItems2Taxes.ModifiedBy, menuItems2Taxes.TaxId, menuItems2Taxes.TaxVersionId, menuItems2Taxes.IsDeleted ? 1 : 0, index);
				}
				query.AppendFormat(InsertManyQueryTemplate, values.Replace("'NULL'", "NULL").ToString());
				DataAccessService.Execute(query.ToString(), parameters);
				parameters.Clear();
				values.Clear();
				query.Clear();
			}


		}

		public async Task InsertManyAsync(IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes> menuItems2TaxesList)
		{
			if (menuItems2TaxesList == null) throw new ArgumentException(nameof(menuItems2TaxesList));

			if (!menuItems2TaxesList.Any()) return;

			var maxInsertManyRows = MaxInsertManyRows;
			var values = new System.Text.StringBuilder();
			var query = new System.Text.StringBuilder();
			var parameters = new Dictionary<string, object>();

			var itemsPerRequest = menuItems2TaxesList.Select((x, i) => new { Index = i, Value = x })
							.GroupBy(x => x.Index / maxInsertManyRows)
							.Select(x => x.Select((v, i) => new { Index = i, Value = v.Value }).ToList())
							.ToList();

			await Task.Delay(10);

			foreach (var items in itemsPerRequest)
			{
				foreach (var item in items)
				{
					var menuItems2Taxes = item.Value;
					var index = item.Index;
					values.AppendLine(index != 0 ? "," : "");
					values.AppendFormat(InsertManyValuesTemplate, menuItems2Taxes.MenuItemId, menuItems2Taxes.MenuItemVersionId, menuItems2Taxes.Modified.ToString(CultureInfo.InvariantCulture), menuItems2Taxes.ModifiedBy, menuItems2Taxes.TaxId, menuItems2Taxes.TaxVersionId, menuItems2Taxes.IsDeleted ? 1 : 0, index);
				}
				query.AppendFormat(InsertManyQueryTemplate, values.Replace("'NULL'", "NULL").ToString());
				await Task.Delay(10);
				await DataAccessService.ExecuteAsync(query.ToString(), parameters);
				parameters.Clear();
				values.Clear();
				query.Clear();
			}

			await Task.Delay(10);

		}



	}
}
