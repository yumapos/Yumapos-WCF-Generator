//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using TestRepositoryGeneration.RepositoryInterfaces;


namespace TestRepositoryGeneration.CustomRepositories.VersionsRepositories
{
	internal partial class MenuItems2TaxesCacheRepository : TestRepositoryGeneration.Infrastructure.RepositoryBase
	{
		private const string Fields = @"MenuItems2Taxess.menu_item_id,MenuItems2Taxess.menu_item_version_id,MenuItems2Taxess.modified,MenuItems2Taxess.modified_by,MenuItems2Taxess.tax_id,MenuItems2Taxess.tax_version_id,MenuItems2Taxess.is_deleted";
		private const string SelectAllQuery = @"SELECT MenuItems2Taxess.menu_item_id,MenuItems2Taxess.menu_item_version_id,MenuItems2Taxess.modified,MenuItems2Taxess.modified_by,MenuItems2Taxess.tax_id,MenuItems2Taxess.tax_version_id,MenuItems2Taxess.is_deleted FROM MenuItems2Taxess   ";
		private const string SelectByQuery = @"SELECT MenuItems2Taxess.menu_item_id,MenuItems2Taxess.menu_item_version_id,MenuItems2Taxess.modified,MenuItems2Taxess.modified_by,MenuItems2Taxess.tax_id,MenuItems2Taxess.tax_version_id,MenuItems2Taxess.is_deleted FROM MenuItems2Taxess ";
		private const string InsertQuery = @"INSERT INTO MenuItems2Taxess(MenuItems2Taxess.menu_item_id,MenuItems2Taxess.menu_item_version_id,MenuItems2Taxess.modified,MenuItems2Taxess.modified_by,MenuItems2Taxess.tax_id,MenuItems2Taxess.tax_version_id,MenuItems2Taxess.is_deleted)  VALUES(@MenuItemId,@MenuItemVersionId,@Modified,@ModifiedBy,@TaxId,@TaxVersionId,@IsDeleted) ";
		private const string UpdateQueryBy = @"UPDATE MenuItems2Taxess SET MenuItems2Taxess.menu_item_id = @MenuItemId,MenuItems2Taxess.menu_item_version_id = @MenuItemVersionId,MenuItems2Taxess.modified = @Modified,MenuItems2Taxess.modified_by = @ModifiedBy,MenuItems2Taxess.tax_id = @TaxId,MenuItems2Taxess.tax_version_id = @TaxVersionId,MenuItems2Taxess.is_deleted = @IsDeleted FROM MenuItems2Taxess ";
		private const string DeleteQueryBy = @"DELETE FROM MenuItems2Taxess ";
		private const string UpsertQuery = @"INSERT INTO MenuItems2Taxess(MenuItems2Taxess.menu_item_id,MenuItems2Taxess.menu_item_version_id,MenuItems2Taxess.modified,MenuItems2Taxess.modified_by,MenuItems2Taxess.tax_id,MenuItems2Taxess.tax_version_id,MenuItems2Taxess.is_deleted)  VALUES(@MenuItemId,@MenuItemVersionId,@Modified,@ModifiedBy,@TaxId,@TaxVersionId,@IsDeleted)  ON CONFLICT () DO UPDATE MenuItems2Taxess SET MenuItems2Taxess.menu_item_id = @MenuItemId,MenuItems2Taxess.menu_item_version_id = @MenuItemVersionId,MenuItems2Taxess.modified = @Modified,MenuItems2Taxess.modified_by = @ModifiedBy,MenuItems2Taxess.tax_id = @TaxId,MenuItems2Taxess.tax_version_id = @TaxVersionId,MenuItems2Taxess.is_deleted = @IsDeleted ";
		private const string WhereQueryByMenuItemId = "WHERE MenuItems2Taxess.menu_item_id = @MenuItemId ";
		private const string WhereQueryByTaxId = "WHERE MenuItems2Taxess.tax_id = @TaxId ";
		private const string AndWithIsDeletedFilter = "AND MenuItems2Taxess.is_deleted = @IsDeleted ";
		private const string WhereWithIsDeletedFilter = "WHERE MenuItems2Taxess.is_deleted = @IsDeleted ";


		public MenuItems2TaxesCacheRepository(TestRepositoryGeneration.Infrastructure.IDataAccessService dataAccessService) : base(dataAccessService) { }
		public IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes> GetAll(bool? isDeleted = false)
		{
			var sql = SelectAllQuery;
			object parameters = new { isDeleted };
			if (isDeleted.HasValue)
			{
				sql = sql + WhereWithIsDeletedFilter;
			}
			var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes>(sql, parameters).ToList();
			return result.ToList();
		}
		public async Task<IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes>> GetAllAsync(bool? isDeleted = false)
		{
			var sql = SelectAllQuery;
			object parameters = new { isDeleted };
			if (isDeleted.HasValue)
			{
				sql = sql + WhereWithIsDeletedFilter;
			}
			var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes>(sql, parameters));
			return result.ToList();
		}

		public IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes> GetByMenuItemId(System.Guid menuItemId, bool? isDeleted = false)
		{
			object parameters = new { menuItemId, isDeleted };
			var sql = SelectByQuery + WhereQueryByMenuItemId;
			if (isDeleted.HasValue)
			{
				sql = sql + AndWithIsDeletedFilter;
			}
			var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes>(sql, parameters);
			return result.ToList();
		}
		public async Task<IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes>> GetByMenuItemIdAsync(System.Guid menuItemId, bool? isDeleted = false)
		{
			object parameters = new { menuItemId, isDeleted };
			var sql = SelectByQuery + WhereQueryByMenuItemId;
			if (isDeleted.HasValue)
			{
				sql = sql + AndWithIsDeletedFilter;
			}
			var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes>(sql, parameters));
			return result.ToList();
		}

		public IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes> GetByTaxId(int taxId, bool? isDeleted = false)
		{
			object parameters = new { taxId, isDeleted };
			var sql = SelectByQuery + WhereQueryByTaxId;
			if (isDeleted.HasValue)
			{
				sql = sql + AndWithIsDeletedFilter;
			}
			var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes>(sql, parameters);
			return result.ToList();
		}
		public async Task<IEnumerable<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes>> GetByTaxIdAsync(int taxId, bool? isDeleted = false)
		{
			object parameters = new { taxId, isDeleted };
			var sql = SelectByQuery + WhereQueryByTaxId;
			if (isDeleted.HasValue)
			{
				sql = sql + AndWithIsDeletedFilter;
			}
			var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes>(sql, parameters));
			return result.ToList();
		}


		public void Insert(TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes menuItems2Taxes)
		{
			DataAccessService.InsertObject(menuItems2Taxes, InsertQuery);
		}
		public async Task InsertAsync(TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes menuItems2Taxes)
		{
			await DataAccessService.InsertObjectAsync(menuItems2Taxes, InsertQuery);
		}

		public void UpdateByMenuItemId(TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes menuItems2Taxes)
		{
			var sql = UpdateQueryBy + WhereQueryByMenuItemId;
			DataAccessService.PersistObject(menuItems2Taxes, sql);
		}
		public async Task UpdateByMenuItemIdAsync(TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes menuItems2Taxes)
		{
			var sql = UpdateQueryBy + WhereQueryByMenuItemId;
			await DataAccessService.PersistObjectAsync(menuItems2Taxes, sql);
		}

		public void UpdateByTaxId(TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes menuItems2Taxes)
		{
			var sql = UpdateQueryBy + WhereQueryByTaxId;
			DataAccessService.PersistObject(menuItems2Taxes, sql);
		}
		public async Task UpdateByTaxIdAsync(TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes menuItems2Taxes)
		{
			var sql = UpdateQueryBy + WhereQueryByTaxId;
			await DataAccessService.PersistObjectAsync(menuItems2Taxes, sql);
		}


		public void InsertOrUpdate(TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes menuItems2Taxes)
		{
			DataAccessService.ExecuteScalar(UpsertQuery, menuItems2Taxes);
		}
		public async Task InsertOrUpdateAsync(TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes menuItems2Taxes)
		{
			await DataAccessService.ExecuteScalarAsync<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes>(UpsertQuery, menuItems2Taxes);
		}

		public void RemoveByMenuItemId(TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes menuItems2Taxes)
		{
			var sql = DeleteQueryBy + WhereQueryByMenuItemId;
			DataAccessService.PersistObject(menuItems2Taxes, sql);
		}
		public async Task RemoveByMenuItemIdAsync(TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes menuItems2Taxes)
		{
			var sql = DeleteQueryBy + WhereQueryByMenuItemId;
			await DataAccessService.PersistObjectAsync(menuItems2Taxes, sql);
		}

		public void RemoveByMenuItemId(System.Guid menuItemId)
		{
			object parameters = new { menuItemId };
			var sql = DeleteQueryBy + WhereQueryByMenuItemId;
			DataAccessService.PersistObject<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes>(sql, parameters);
		}
		public async Task RemoveByMenuItemIdAsync(System.Guid menuItemId)
		{
			object parameters = new { menuItemId };
			var sql = DeleteQueryBy + WhereQueryByMenuItemId;
			await DataAccessService.PersistObjectAsync<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes>(sql, parameters);
		}

		public void RemoveByTaxId(TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes menuItems2Taxes)
		{
			var sql = DeleteQueryBy + WhereQueryByTaxId;
			DataAccessService.PersistObject(menuItems2Taxes, sql);
		}
		public async Task RemoveByTaxIdAsync(TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes menuItems2Taxes)
		{
			var sql = DeleteQueryBy + WhereQueryByTaxId;
			await DataAccessService.PersistObjectAsync(menuItems2Taxes, sql);
		}

		public void RemoveByTaxId(int taxId)
		{
			object parameters = new { taxId };
			var sql = DeleteQueryBy + WhereQueryByTaxId;
			DataAccessService.PersistObject<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes>(sql, parameters);
		}
		public async Task RemoveByTaxIdAsync(int taxId)
		{
			object parameters = new { taxId };
			var sql = DeleteQueryBy + WhereQueryByTaxId;
			await DataAccessService.PersistObjectAsync<TestRepositoryGeneration.DataObjects.VersionsRepositories.MenuItems2Taxes>(sql, parameters);
		}



	}
}
