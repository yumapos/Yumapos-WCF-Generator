//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using TestRepositoryGeneration.RepositoryInterfaces;


namespace TestRepositoryGeneration.CustomRepositories.BaseRepositories
{
	public partial class CustomerSubscriptionRepository : TestRepositoryGeneration.Infrastructure.RepositoryBase, TestRepositoryGeneration.RepositoryInterfaces.ICustomerSubscriptionRepository
	{
		private const string Fields = @"[CustomerSubscriptions].[CustomerId],[CustomerSubscriptions].[CustomerNotificationsType],[CustomerSubscriptions].[Email],[CustomerSubscriptions].[SMS],[CustomerSubscriptions].[Push],[CustomerSubscriptions].[IsCustomizable],[CustomerSubscriptions].[ResendPeriod],[CustomerSubscriptions].[IsDeleted]";
		private const string SelectAllQuery = @"SELECT [CustomerSubscriptions].[CustomerId],[CustomerSubscriptions].[CustomerNotificationsType],[CustomerSubscriptions].[Email],[CustomerSubscriptions].[SMS],[CustomerSubscriptions].[Push],[CustomerSubscriptions].[IsCustomizable],[CustomerSubscriptions].[ResendPeriod],[CustomerSubscriptions].[IsDeleted] FROM [CustomerSubscriptions]  {whereTenantId:[CustomerSubscriptions]} ";
		private const string SelectByQuery = @"SELECT [CustomerSubscriptions].[CustomerId],[CustomerSubscriptions].[CustomerNotificationsType],[CustomerSubscriptions].[Email],[CustomerSubscriptions].[SMS],[CustomerSubscriptions].[Push],[CustomerSubscriptions].[IsCustomizable],[CustomerSubscriptions].[ResendPeriod],[CustomerSubscriptions].[IsDeleted] FROM [CustomerSubscriptions] ";
		private const string InsertQuery = @"INSERT INTO [CustomerSubscriptions]([CustomerSubscriptions].[CustomerId],[CustomerSubscriptions].[CustomerNotificationsType],[CustomerSubscriptions].[Email],[CustomerSubscriptions].[SMS],[CustomerSubscriptions].[Push],[CustomerSubscriptions].[IsCustomizable],[CustomerSubscriptions].[ResendPeriod],[CustomerSubscriptions].[IsDeleted],[CustomerSubscriptions].[TenantId])  VALUES(@CustomerId,@CustomerNotificationsType,@Email,@SMS,@Push,@IsCustomizable,@ResendPeriod,@IsDeleted,@TenantId) ";
		private const string InsertManyQuery = @"INSERT INTO [CustomerSubscriptions]([CustomerSubscriptions].[CustomerId],[CustomerSubscriptions].[CustomerNotificationsType],[CustomerSubscriptions].[Email],[CustomerSubscriptions].[SMS],[CustomerSubscriptions].[Push],[CustomerSubscriptions].[IsCustomizable],[CustomerSubscriptions].[ResendPeriod],[CustomerSubscriptions].[IsDeleted],[CustomerSubscriptions].[TenantId])  VALUES(@CustomerId{0},@CustomerNotificationsType{0},@Email{0},@SMS{0},@Push{0},@IsCustomizable{0},@ResendPeriod{0},@IsDeleted{0},@TenantId) ";
		private const string UpdateQueryBy = @"UPDATE [CustomerSubscriptions] SET [CustomerSubscriptions].[CustomerId] = @CustomerId,[CustomerSubscriptions].[CustomerNotificationsType] = @CustomerNotificationsType,[CustomerSubscriptions].[Email] = @Email,[CustomerSubscriptions].[SMS] = @SMS,[CustomerSubscriptions].[Push] = @Push,[CustomerSubscriptions].[IsCustomizable] = @IsCustomizable,[CustomerSubscriptions].[ResendPeriod] = @ResendPeriod,[CustomerSubscriptions].[IsDeleted] = @IsDeleted FROM [CustomerSubscriptions] ";
		private const string DeleteQueryBy = @"DELETE FROM [CustomerSubscriptions] ";
		private const string InsertOrUpdateQuery = @"UPDATE [CustomerSubscriptions] SET [CustomerSubscriptions].[CustomerId] = @CustomerId,[CustomerSubscriptions].[CustomerNotificationsType] = @CustomerNotificationsType,[CustomerSubscriptions].[Email] = @Email,[CustomerSubscriptions].[SMS] = @SMS,[CustomerSubscriptions].[Push] = @Push,[CustomerSubscriptions].[IsCustomizable] = @IsCustomizable,[CustomerSubscriptions].[ResendPeriod] = @ResendPeriod,[CustomerSubscriptions].[IsDeleted] = @IsDeleted FROM [CustomerSubscriptions]  WHERE [CustomerSubscriptions].[CustomerId] = @CustomerId AND (([CustomerSubscriptions].[CustomerNotificationsType] IS NULL AND @CustomerNotificationsType IS NULL) OR [CustomerSubscriptions].[CustomerNotificationsType] = @CustomerNotificationsType){andTenantId:[CustomerSubscriptions]}  IF @@ROWCOUNT = 0 BEGIN INSERT INTO [CustomerSubscriptions]([CustomerSubscriptions].[CustomerId],[CustomerSubscriptions].[CustomerNotificationsType],[CustomerSubscriptions].[Email],[CustomerSubscriptions].[SMS],[CustomerSubscriptions].[Push],[CustomerSubscriptions].[IsCustomizable],[CustomerSubscriptions].[ResendPeriod],[CustomerSubscriptions].[IsDeleted],[CustomerSubscriptions].[TenantId])  VALUES(@CustomerId,@CustomerNotificationsType,@Email,@SMS,@Push,@IsCustomizable,@ResendPeriod,@IsDeleted,@TenantId)  END";
		private const string WhereQueryByCustomerIdAndCustomerNotificationsType = "WHERE [CustomerSubscriptions].[CustomerId] = @CustomerId AND (([CustomerSubscriptions].[CustomerNotificationsType] IS NULL AND @CustomerNotificationsType IS NULL) OR [CustomerSubscriptions].[CustomerNotificationsType] = @CustomerNotificationsType){andTenantId:[CustomerSubscriptions]} ";


		public CustomerSubscriptionRepository(TestRepositoryGeneration.Infrastructure.IDataAccessService dataAccessService, TestRepositoryGeneration.Infrastructure.IDataAccessController dataAccessController) : base(dataAccessService, dataAccessController) { }
		/*
		public IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription> GetAll()
		{
		var sql = SelectAllQuery;
		object parameters = null;
		var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription>(sql, parameters).ToList();
		return result.ToList();
		}
		public async Task<IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription>> GetAllAsync()
		{
		var sql = SelectAllQuery;
		object parameters = null;
		var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription>(sql, parameters));
		return result.ToList();
		}

		*/
		public TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription GetByCustomerIdAndCustomerNotificationsType(string customerId, int customerNotificationsType)
		{
			object parameters = new { customerId, customerNotificationsType };
			var sql = SelectByQuery + WhereQueryByCustomerIdAndCustomerNotificationsType;
			var result = DataAccessService.Get<TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription>(sql, parameters);
			return result.FirstOrDefault();
		}
		public async Task<TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription> GetByCustomerIdAndCustomerNotificationsTypeAsync(string customerId, int customerNotificationsType)
		{
			object parameters = new { customerId, customerNotificationsType };
			var sql = SelectByQuery + WhereQueryByCustomerIdAndCustomerNotificationsType;
			var result = (await DataAccessService.GetAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription>(sql, parameters));
			return result.FirstOrDefault();
		}


		/*
		public void Insert(TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription customerSubscription)
		{
		DataAccessService.InsertObject(customerSubscription,InsertQuery);
		}
		public async Task InsertAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription customerSubscription)
		{
		await DataAccessService.InsertObjectAsync(customerSubscription,InsertQuery);
		}

		*/
		public void InsertMany(IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription> customerSubscriptionList)
		{
			if (customerSubscriptionList == null) throw new ArgumentException(nameof(customerSubscriptionList));

			if (!customerSubscriptionList.Any()) return;

			var query = new System.Text.StringBuilder();
			var counter = 0;
			var parameters = new Dictionary<string, object>();
			parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
			foreach (var customerSubscription in customerSubscriptionList)
			{
				if (parameters.Count + 9 > MaxRepositoryParams)
				{
					DataAccessService.Execute(query.ToString(), parameters);
					query.Clear();
					counter = 0;
					parameters.Clear();
					parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
				}
				parameters.Add($"CustomerId{counter}", customerSubscription.CustomerId);
				parameters.Add($"CustomerNotificationsType{counter}", customerSubscription.CustomerNotificationsType);
				parameters.Add($"Email{counter}", customerSubscription.Email);
				parameters.Add($"SMS{counter}", customerSubscription.SMS);
				parameters.Add($"Push{counter}", customerSubscription.Push);
				parameters.Add($"IsCustomizable{counter}", customerSubscription.IsCustomizable);
				parameters.Add($"ResendPeriod{counter}", customerSubscription.ResendPeriod);
				parameters.Add($"IsDeleted{counter}", customerSubscription.IsDeleted);
				query.AppendFormat(InsertManyQuery, counter);
				counter++;
			}
			DataAccessService.Execute(query.ToString(), parameters);
		}

		public async Task InsertManyAsync(IEnumerable<TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription> customerSubscriptionList)
		{
			if (customerSubscriptionList == null) throw new ArgumentException(nameof(customerSubscriptionList));

			if (!customerSubscriptionList.Any()) return;

			var query = new System.Text.StringBuilder();
			var counter = 0;
			var parameters = new Dictionary<string, object>();
			parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
			foreach (var customerSubscription in customerSubscriptionList)
			{
				if (parameters.Count + 9 > MaxRepositoryParams)
				{
					await DataAccessService.ExecuteAsync(query.ToString(), parameters);
					query.Clear();
					counter = 0;
					parameters.Clear();
					parameters.Add($"TenantId", DataAccessController.Tenant.TenantId);
				}
				parameters.Add($"CustomerId{counter}", customerSubscription.CustomerId);
				parameters.Add($"CustomerNotificationsType{counter}", customerSubscription.CustomerNotificationsType);
				parameters.Add($"Email{counter}", customerSubscription.Email);
				parameters.Add($"SMS{counter}", customerSubscription.SMS);
				parameters.Add($"Push{counter}", customerSubscription.Push);
				parameters.Add($"IsCustomizable{counter}", customerSubscription.IsCustomizable);
				parameters.Add($"ResendPeriod{counter}", customerSubscription.ResendPeriod);
				parameters.Add($"IsDeleted{counter}", customerSubscription.IsDeleted);
				query.AppendFormat(InsertManyQuery, counter);
				counter++;
			}
			await DataAccessService.ExecuteAsync(query.ToString(), parameters);
		}

		/*
		public void UpdateByCustomerIdAndCustomerNotificationsType(TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription customerSubscription)
		{
		var sql = UpdateQueryBy + WhereQueryByCustomerIdAndCustomerNotificationsType; 
		DataAccessService.PersistObject(customerSubscription, sql);
		}
		public async Task UpdateByCustomerIdAndCustomerNotificationsTypeAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription customerSubscription)
		{
		var sql = UpdateQueryBy + WhereQueryByCustomerIdAndCustomerNotificationsType; 
		await DataAccessService.PersistObjectAsync(customerSubscription, sql);
		}


		*/
		/*
		public void RemoveByCustomerIdAndCustomerNotificationsType(TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription customerSubscription)
		{
		var sql = DeleteQueryBy + WhereQueryByCustomerIdAndCustomerNotificationsType; 
		DataAccessService.PersistObject(customerSubscription, sql);
		}
		public async Task RemoveByCustomerIdAndCustomerNotificationsTypeAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription customerSubscription)
		{
		var sql = DeleteQueryBy + WhereQueryByCustomerIdAndCustomerNotificationsType; 
		await DataAccessService.PersistObjectAsync(customerSubscription, sql);
		}

		public void RemoveByCustomerIdAndCustomerNotificationsType(string customerId, int customerNotificationsType)
		{
		object parameters = new {customerId, customerNotificationsType};
		var sql = DeleteQueryBy + WhereQueryByCustomerIdAndCustomerNotificationsType; 
		DataAccessService.PersistObject<TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription>(sql, parameters);
		}
		public async Task RemoveByCustomerIdAndCustomerNotificationsTypeAsync(string customerId, int customerNotificationsType)
		{
		object parameters = new {customerId, customerNotificationsType};
		var sql = DeleteQueryBy + WhereQueryByCustomerIdAndCustomerNotificationsType; 
		await DataAccessService.PersistObjectAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription>(sql, parameters);
		}


		*/
		/*
		public void InsertOrUpdate(TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription customerSubscription)
		{
		DataAccessService.ExecuteScalar(InsertOrUpdateQuery,customerSubscription);
		}
		public async Task InsertOrUpdateAsync(TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription customerSubscription)
		{
		await DataAccessService.ExecuteScalarAsync<TestRepositoryGeneration.DataObjects.BaseRepositories.CustomerSubscription >(InsertOrUpdateQuery,customerSubscription);
		}

		*/

	}
}
