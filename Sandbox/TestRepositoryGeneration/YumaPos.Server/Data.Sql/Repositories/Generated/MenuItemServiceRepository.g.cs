//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using YumaPos.Server.Infrastructure.Repositories;
using YumaPos.Server.Infrastructure.DataObjects;
using YumaPos.FrontEnd.Infrastructure.Common.DataAccess;
using YumaPos.FrontEnd.Infrastructure.Configuration;
using YumaPos.Server.Data.Sql.Menu;
using YumaPos.Server.Data.Sql;


namespace YumaPos.Server.Data.Sql.Menu
{
	public partial class MenuItemRepository : IMenuItemRepository
	{
		private IDataAccessController _dataAccessController;
		private MenuItemCacheRepository _menuItemCacheRepository;
		private MenuItemVersionRepository _menuItemVersionRepository;
		private MenuItems2TaxesCacheRepository _menuItems2TaxesCacheRepository;
		private MenuItems2TaxesVersionRepository _menuItems2TaxesVersionRepository;
		private TaxCacheRepository _taxCacheRepository;


		public MenuItemRepository(IDataAccessController dataAccessController,
		IDataAccessService dataAccessService)
		{
			_dataAccessController = dataAccessController;
			_menuItemCacheRepository = new MenuItemCacheRepository(dataAccessService);
			_menuItemVersionRepository = new MenuItemVersionRepository(dataAccessService);
			_menuItems2TaxesCacheRepository = new MenuItems2TaxesCacheRepository(dataAccessService);
			_menuItems2TaxesVersionRepository = new MenuItems2TaxesVersionRepository(dataAccessService);
			_taxCacheRepository = new TaxCacheRepository(dataAccessService);
		}

		public IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem> GetAll(bool? isDeleted = false)
		{
			return _menuItemCacheRepository.GetAll(isDeleted);
		}
		public async Task<IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem>> GetAllAsync(bool? isDeleted = false)
		{
			return await _menuItemCacheRepository.GetAllAsync(isDeleted);
		}

		public YumaPos.Server.Infrastructure.DataObjects.MenuItem GetByMenuItemId(System.Guid menuItemId, DateTimeOffset modified, bool? isDeleted = false)
		{
			var result = _menuItemVersionRepository.GetByMenuItemId(menuItemId, modified, isDeleted);
			return result;
		}
		public async Task<YumaPos.Server.Infrastructure.DataObjects.MenuItem> GetByMenuItemIdAsync(System.Guid menuItemId, DateTimeOffset modified, bool? isDeleted = false)
		{
			var result = await _menuItemVersionRepository.GetByMenuItemIdAsync(menuItemId, modified, isDeleted);
			return result;
		}

		public IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem> GetByMenuCategoryId(System.Guid menuCategoryId, DateTimeOffset modified, bool? isDeleted = false)
		{
			var result = _menuItemVersionRepository.GetByMenuCategoryId(menuCategoryId, modified, isDeleted);
			return result.ToList();
		}
		public async Task<IEnumerable<YumaPos.Server.Infrastructure.DataObjects.MenuItem>> GetByMenuCategoryIdAsync(System.Guid menuCategoryId, DateTimeOffset modified, bool? isDeleted = false)
		{
			var result = await _menuItemVersionRepository.GetByMenuCategoryIdAsync(menuCategoryId, modified, isDeleted);
			return result.ToList();
		}

		public YumaPos.Server.Infrastructure.DataObjects.MenuItem GetByMenuItemVersionId(System.Guid menuItemVersionId, bool? isDeleted = false)
		{
			var result = _menuItemVersionRepository.GetByMenuItemVersionId(menuItemVersionId, isDeleted);
			return result;
		}
		public async Task<YumaPos.Server.Infrastructure.DataObjects.MenuItem> GetByMenuItemVersionIdAsync(System.Guid menuItemVersionId, bool? isDeleted = false)
		{
			var result = await _menuItemVersionRepository.GetByMenuItemVersionIdAsync(menuItemVersionId, isDeleted);
			return result;
		}

		public System.Guid Insert(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
			menuItem.Modified = DateTimeOffset.Now;
			menuItem.ModifiedBy = _dataAccessController.EmployeeId.Value;
			menuItem.MenuItemVersionId = Guid.NewGuid();
			if (menuItem.MenuItemId == null || menuItem.MenuItemId == Guid.Empty)
			{
				throw new ArgumentException("MenuItemId");
			}
			_menuItemVersionRepository.Insert(menuItem);
			var res = _menuItemCacheRepository.Insert(menuItem);
			UpdateMenuItems2Taxes(menuItem);
			return (System.Guid)res;
		}
		public async Task<System.Guid> InsertAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
			menuItem.Modified = DateTimeOffset.Now;
			menuItem.ModifiedBy = _dataAccessController.EmployeeId.Value;
			menuItem.MenuItemVersionId = Guid.NewGuid();
			if (menuItem.MenuItemId == null || menuItem.MenuItemId == Guid.Empty)
			{
				throw new ArgumentException("MenuItemId");
			}
			await _menuItemVersionRepository.InsertAsync(menuItem);
			var res = await _menuItemCacheRepository.InsertAsync(menuItem);
			UpdateMenuItems2Taxes(menuItem);
			return (System.Guid)res;
		}

		public void UpdateByMenuItemId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
			menuItem.Modified = DateTimeOffset.Now;
			menuItem.ModifiedBy = _dataAccessController.EmployeeId.Value;
			menuItem.MenuItemVersionId = Guid.NewGuid();
			_menuItemVersionRepository.Insert(menuItem);
			_menuItemCacheRepository.UpdateByMenuItemId(menuItem);
			UpdateMenuItems2Taxes(menuItem);
		}
		public async Task UpdateByMenuItemIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
			menuItem.Modified = DateTimeOffset.Now;
			menuItem.ModifiedBy = _dataAccessController.EmployeeId.Value;
			menuItem.MenuItemVersionId = Guid.NewGuid();
			await _menuItemVersionRepository.InsertAsync(menuItem);
			await _menuItemCacheRepository.UpdateByMenuItemIdAsync(menuItem);
			UpdateMenuItems2Taxes(menuItem);
		}
		/*
		public void UpdateByMenuCategoryId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
		menuItem.Modified = DateTimeOffset.Now;
		menuItem.ModifiedBy = _dataAccessController.EmployeeId.Value;
		menuItem.MenuItemVersionId = Guid.NewGuid();
		_menuItemVersionRepository.Insert(menuItem);
		_menuItemCacheRepository.UpdateByMenuCategoryId(menuItem);
		UpdateMenuItems2Taxes(menuItem);
		}
		public async Task UpdateByMenuCategoryIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
		menuItem.Modified = DateTimeOffset.Now;
		menuItem.ModifiedBy = _dataAccessController.EmployeeId.Value;
		menuItem.MenuItemVersionId = Guid.NewGuid();
		await _menuItemVersionRepository.InsertAsync(menuItem);
		await _menuItemCacheRepository.UpdateByMenuCategoryIdAsync(menuItem);
		UpdateMenuItems2Taxes(menuItem);
		}

		*/
		private void UpdateMenuItems2Taxes(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
			if (menuItem.TaxIds == null)
				menuItem.TaxIds = _menuItems2TaxesCacheRepository.GetByMenuItemId(menuItem.MenuItemId).Select(i => i.TaxId);
			var listOfMenuItems2Taxes = menuItem.TaxIds.Select(ids => new MenuItems2Taxes()
			{
				TaxId = ids,
				TaxVersionId = _taxCacheRepository.GetByTaxId(ids).TaxVersionId,
				MenuItemId = menuItem.MenuItemId,
				MenuItemVersionId = menuItem.MenuItemVersionId,
			}).ToList();
			_menuItems2TaxesCacheRepository.RemoveByMenuItemId(menuItem.MenuItemId);
			foreach (var mt in listOfMenuItems2Taxes)
			{
				mt.Modified = DateTimeOffset.Now;
				mt.ModifiedBy = menuItem.ModifiedBy;
				_menuItems2TaxesCacheRepository.Insert(mt);
				_menuItems2TaxesVersionRepository.Insert(mt);
			}
		}

		public void RemoveByMenuItemId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
			menuItem.IsDeleted = true;
			UpdateByMenuItemId(menuItem);
		}
		public async Task RemoveByMenuItemIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
			menuItem.IsDeleted = true;
			await UpdateByMenuItemIdAsync(menuItem);
		}
		public void RemoveByMenuItemId(System.Guid menuItemId)
		{
			var result = _menuItemCacheRepository.GetByMenuItemId(menuItemId);
			result.IsDeleted = true;
			UpdateByMenuItemId(result);
		}
		public async Task RemoveByMenuItemIdAsync(System.Guid menuItemId)
		{
			var result = await _menuItemCacheRepository.GetByMenuItemIdAsync(menuItemId);
			result.IsDeleted = true;
			await UpdateByMenuItemIdAsync(result);
		}

		/*
		public void RemoveByMenuCategoryId(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
		menuItem.IsDeleted = true;
		_menuItemCacheRepository.UpdateByMenuCategoryId(menuItem);
		}
		public async Task RemoveByMenuCategoryIdAsync(YumaPos.Server.Infrastructure.DataObjects.MenuItem menuItem)
		{
		menuItem.IsDeleted = true;
		await _menuItemCacheRepository.UpdateByMenuCategoryIdAsync(menuItem);
		}
		public void RemoveByMenuCategoryId(System.Guid menuCategoryId)
		{
		var result = _menuItemCacheRepository.GetByMenuCategoryId(menuCategoryId);
		foreach (var item in result)
		{
		item.IsDeleted = true;
		UpdateByMenuCategoryId(item);
		}
		}
		public async Task RemoveByMenuCategoryIdAsync(System.Guid menuCategoryId)
		{
		var result = await _menuItemCacheRepository.GetByMenuCategoryIdAsync(menuCategoryId);
		foreach (var item in result)
		{
		item.IsDeleted = true;
		await UpdateByMenuCategoryIdAsync(item);
		}
		}

		*/

	}
}
