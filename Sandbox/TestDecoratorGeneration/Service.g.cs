//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace TestDecoratorGeneration
{
	public partial class Service
	{

		private TestDecoratorGeneration.ServiceDecorator DecoratedComponent { get; set; }

		public async System.Threading.Tasks.Task<TestDecoratorGeneration.ResponseDto> Open()
		{
			var ret = default(TestDecoratorGeneration.ResponseDto);
			try
			{
				var res = await OnEntryAsync("Open", new object[] { });
				if (!res.Success)
				{
					ret = new TestDecoratorGeneration.ResponseDto()
					{
						PostprocessingType = res.PostprocessingType,
						Context = SerializationService.Serialize(res.Context, SerializationOptions)
					};
				}
				else
				{
					ret = await DecoratedComponent.Open();

					if (res.PostprocessingType.HasValue)
					{
						var warning = new YumaPos.Shared.API.ResponseDtos.ResponseErrorDto()
						{
							Code = res.PostprocessingType,
							Message = res.AdditionalInformation?.ToString(),
							Details = SerializationService.Serialize(res.Context, SerializationOptions),
						};
						ret.Warnings = new System.Collections.Generic.List<YumaPos.Shared.API.ResponseDtos.ResponseErrorDto>() { warning };
					}

				}
				await OnExitAsync(ret);
			}
			catch (System.Exception e)
			{
				OnException(e);
				throw;
			}
			finally
			{
				OnFinally();
			}
			return ret;
		}
		public async System.Threading.Tasks.Task<TestDecoratorGeneration.ResponseDto> AddItem(System.Guid id, string name)
		{
			var ret = default(TestDecoratorGeneration.ResponseDto);
			try
			{
				var res = await OnEntryAsync("AddItem", new object[] { id, name });
				if (!res.Success)
				{
					ret = new TestDecoratorGeneration.ResponseDto()
					{
						PostprocessingType = res.PostprocessingType,
						Context = SerializationService.Serialize(res.Context, SerializationOptions)
					};
				}
				else
				{
					ret = await DecoratedComponent.AddItem(id, name);

					if (res.PostprocessingType.HasValue)
					{
						var warning = new YumaPos.Shared.API.ResponseDtos.ResponseErrorDto()
						{
							Code = res.PostprocessingType,
							Message = res.AdditionalInformation?.ToString(),
							Details = SerializationService.Serialize(res.Context, SerializationOptions),
						};
						ret.Warnings = new System.Collections.Generic.List<YumaPos.Shared.API.ResponseDtos.ResponseErrorDto>() { warning };
					}

				}
				await OnExitAsync(ret);
			}
			catch (System.Exception e)
			{
				OnException(e);
				throw;
			}
			finally
			{
				OnFinally();
			}
			return ret;
		}
		public async System.Threading.Tasks.Task<TestDecoratorGeneration.ItemListResponseDto> GetListOfItems()
		{
			var ret = default(TestDecoratorGeneration.ItemListResponseDto);
			try
			{
				var res = await OnEntryAsync("GetListOfItems", new object[] { });
				if (!res.Success)
				{
					ret = new TestDecoratorGeneration.ItemListResponseDto()
					{
						PostprocessingType = res.PostprocessingType,
						Context = SerializationService.Serialize(res.Context, SerializationOptions)
					};
				}
				else
				{
					ret = await DecoratedComponent.GetListOfItems();

					if (res.PostprocessingType.HasValue)
					{
						var warning = new YumaPos.Shared.API.ResponseDtos.ResponseErrorDto()
						{
							Code = res.PostprocessingType,
							Message = res.AdditionalInformation?.ToString(),
							Details = SerializationService.Serialize(res.Context, SerializationOptions),
						};
						ret.Warnings = new System.Collections.Generic.List<YumaPos.Shared.API.ResponseDtos.ResponseErrorDto>() { warning };
					}

				}
				await OnExitAsync(ret);
			}
			catch (System.Exception e)
			{
				OnException(e);
				throw;
			}
			finally
			{
				OnFinally();
			}
			return ret;
		}

	}
}
