//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace TestDecoratorGeneration
{
	public partial class ServiceDecorator
	{

		private TestDecoratorGeneration.Service DecoratedComponent { get; set; }

		public async System.Threading.Tasks.Task Open()
		{
			try
			{
				var res = await OnEntryAsync("Open", new object[] { });
				if (!res.Success)
				{
					ret = new ()
					{
						PostprocessingType = res.PostprocessingType,
						Context = SerializationService.Serialize(res.Context, SerializationOptions)
					};
				}
				else
				{
					await DecoratedComponent.Open();
				}
				await OnExitAsync();
			}
			catch (System.Exception e)
			{
				OnException(e);
				throw;
			}
			finally
			{
				OnFinally();
			}
		}
		public async System.Threading.Tasks.Task<bool> AddItem2(System.Guid id, string name)
		{
			var ret = default(bool);
			try
			{
				var res = await OnEntryAsync("AddItem2", new object[] { id, name });
				if (!res.Success)
				{
					ret = new bool()
					{
						PostprocessingType = res.PostprocessingType,
						Context = SerializationService.Serialize(res.Context, SerializationOptions)
					};
				}
				else
				{
					ret = await DecoratedComponent.AddItem2(id, name);
				}
				await OnExitAsync(ret);
			}
			catch (System.Exception e)
			{
				OnException(e);
				throw;
			}
			finally
			{
				OnFinally();
			}
			return ret;
		}
		public async System.Threading.Tasks.Task<TestDecoratorGeneration.ResponseDto> AddItem(System.Guid id, string name)
		{
			var ret = default(TestDecoratorGeneration.ResponseDto);
			try
			{
				var res = await OnEntryAsync("AddItem", new object[] { id, name });
				if (!res.Success)
				{
					ret = new TestDecoratorGeneration.ResponseDto()
					{
						PostprocessingType = res.PostprocessingType,
						Context = SerializationService.Serialize(res.Context, SerializationOptions)
					};
				}
				else
				{
					ret = await DecoratedComponent.AddItem(id, name);
				}
				await OnExitAsync(ret);
			}
			catch (System.Exception e)
			{
				OnException(e);
				throw;
			}
			finally
			{
				OnFinally();
			}
			return ret;
		}
		public async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TestDecoratorGeneration.ItemDto>> GetItems()
		{
			var ret = default(System.Collections.Generic.IEnumerable<TestDecoratorGeneration.ItemDto>);
			try
			{
				var res = await OnEntryAsync("GetItems", new object[] { });
				if (!res.Success)
				{
					ret = new System.Collections.Generic.IEnumerable<TestDecoratorGeneration.ItemDto>()
					{
						PostprocessingType = res.PostprocessingType,
						Context = SerializationService.Serialize(res.Context, SerializationOptions)
					};
				}
				else
				{
					ret = await DecoratedComponent.GetItems();
				}
				await OnExitAsync(ret);
			}
			catch (System.Exception e)
			{
				OnException(e);
				throw;
			}
			finally
			{
				OnFinally();
			}
			return ret;
		}
		public void Stop()
		{
			try
			{
				var res = OnEntry("Stop", new object[] { });
				if (!res.Success)
				{
					ret = new void()
					{
						PostprocessingType = res.PostprocessingType,
						Context = SerializationService.Serialize(res.Context, SerializationOptions)
					};
				}
				else
				{
					DecoratedComponent.Stop();
				}
				OnExit();
			}
			catch (System.Exception e)
			{
				OnException(e);
				throw;
			}
			finally
			{
				OnFinally();
			}
		}
		public async System.Threading.Tasks.Task<string> GetSystemSettings(string[] listOfSystemSettings)
		{
			var ret = default(string);
			try
			{
				var res = await OnEntryAsync("GetSystemSettings", new object[] { listOfSystemSettings });
				if (!res.Success)
				{
					ret = new string()
					{
						PostprocessingType = res.PostprocessingType,
						Context = SerializationService.Serialize(res.Context, SerializationOptions)
					};
				}
				else
				{
					ret = await DecoratedComponent.GetSystemSettings(listOfSystemSettings);
				}
				await OnExitAsync(ret);
			}
			catch (System.Exception e)
			{
				OnException(e);
				throw;
			}
			finally
			{
				OnFinally();
			}
			return ret;
		}
		public System.Guid GetGuid()
		{
			var ret = default(System.Guid);
			try
			{
				var res = OnEntry("GetGuid", new object[] { });
				if (!res.Success)
				{
					ret = new System.Guid()
					{
						PostprocessingType = res.PostprocessingType,
						Context = SerializationService.Serialize(res.Context, SerializationOptions)
					};
				}
				else
				{
					ret = DecoratedComponent.GetGuid();
				}
				OnExit(ret);
			}
			catch (System.Exception e)
			{
				OnException(e);
				throw;
			}
			finally
			{
				OnFinally();
			}
			return ret;
		}
		public int GetInt()
		{
			var ret = default(int);
			try
			{
				var res = OnEntry("GetInt", new object[] { });
				if (!res.Success)
				{
					ret = new int()
					{
						PostprocessingType = res.PostprocessingType,
						Context = SerializationService.Serialize(res.Context, SerializationOptions)
					};
				}
				else
				{
					ret = DecoratedComponent.GetInt();
				}
				OnExit(ret);
			}
			catch (System.Exception e)
			{
				OnException(e);
				throw;
			}
			finally
			{
				OnFinally();
			}
			return ret;
		}

	}
}
