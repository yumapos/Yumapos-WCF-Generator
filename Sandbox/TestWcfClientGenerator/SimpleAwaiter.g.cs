//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;
using System.Threading;



 namespace TestWcfClientGenerator
 {
	 public class SimpleAwaiter : INotifyCompletion
	 {
		 #region Fields

		 protected readonly Task task;
		 protected readonly Action beforeAwait;
		 protected readonly Action afterAwait;

		 #endregion

		 public SimpleAwaiter(Task task, Action beforeAwait, Action afterAwait)
		 {
			 this.task = task;
			 this.beforeAwait = beforeAwait;
			 this.afterAwait = afterAwait;
		 }

		 public SimpleAwaiter GetAwaiter()
		 {
			 return this;
		 }

		 public void GetResult()
		 {
			 try
			 {
				 // FUCK YEAH! DO NOT REMOVE!
				 task.GetAwaiter().GetResult();
			 }
			 catch (AggregateException ex)
			 {
				 throw ex.InnerException;
			 }
		 }

		 public bool IsCompleted
		 {
			 get 
			 {
				 // don't do anything if the task completed synchronously
				 // (we're on the same thread)
				 if (task.IsCompleted)
				 {
					 return true;
				 }
				 beforeAwait();
				 return false;
			 }
		 }

		 public void OnCompleted(Action continuation)
		 {
			 task.ContinueWith(t =>
			 { 
				 afterAwait();
				 continuation();
			 },
			 CancellationToken.None,
			 TaskContinuationOptions.ExecuteSynchronously,
			 SynchronizationContext.Current != null
				 ? TaskScheduler.FromCurrentSynchronizationContext()
				 : TaskScheduler.Current);
		}
	 }

	 public class SimpleAwaiter<TResult> : SimpleAwaiter
	 {
		 #region Fields

		 private readonly Task<TResult> _task;

		 #endregion

		 public SimpleAwaiter(Task<TResult> task, Action beforeAwait, Action afterAwait)
			 : base(task, beforeAwait, afterAwait)
		 {
			 _task = task;
		 }

		 public new SimpleAwaiter<TResult> GetAwaiter()
		 {
			 return this;
		 }

		 public new TResult GetResult()
		 {
			 try
			 {
				 return _task.Result;
			 }
			 catch (AggregateException ex)
			 {
				 throw ex.InnerException;
			 }
		 }
	 }
}
