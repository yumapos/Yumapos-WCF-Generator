//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using YumaPos.Shared.Terminal.Infrastructure;
using YumaPos.Shared.API.ResponseDtos;
using YumaPos.FrontEnd.Infrastructure.CommandProcessing;

namespace TestWcfClientGenerator
{
	public sealed class ApiSecurityDecorator : TestWcfClientGenerator.IWcfServiceApi
	{
		private readonly TestWcfClientGenerator.IWcfServiceApi _actor;
		private Func<IEnumerable<ResponseErrorDto>, Task> _warningsHandler;

		private async Task HandleWarnings(IEnumerable<ResponseErrorDto> responseWarnings)
		{
			if (_warningsHandler != null)
			{
				await _warningsHandler(responseWarnings);
			}
		}

		#region Properties
		public ExecutionContext ExecutionContext
		{
			get { return _actor.ExecutionContext; }
			set { _actor.ExecutionContext = value; }
		}
		#endregion
		public ApiSecurityDecorator(TestWcfClientGenerator.IWcfServiceApi actor, Func<IEnumerable<ResponseErrorDto>, Task> warningHandler)
		{
			if (actor == null) throw new ArgumentNullException(nameof(actor));
			_actor = actor;
			_warningsHandler = warningHandler;
		}
		public async System.Threading.Tasks.Task<TestDecoratorGeneration.ResponseDto> AddItem(System.Guid id, string name)
		{
			var response = await _actor.AddItem(id, name);
			if (!response.Context.IsEmpty() || response.PostprocessingType != null)
			{
				throw new ServerSecurityException(response.Context, response.PostprocessingType, response.Errors, response.ServerInfo) { Value = response.Value };
			}

			if (response.Warnings != null && response.Warnings.Any())
			{
				await HandleWarnings(response.Warnings);
			}

			return response;
		}

		public async System.Threading.Tasks.Task<TestDecoratorGeneration.ItemDto> GetItems()
		{
			var response = await _actor.GetItems();
			if (!response.Context.IsEmpty() || response.PostprocessingType != null)
			{
				throw new ServerSecurityException(response.Context, response.PostprocessingType, response.Errors, response.ServerInfo) { Value = response.Value };
			}

			if (response.Warnings != null && response.Warnings.Any())
			{
				await HandleWarnings(response.Warnings);
			}

			return response;
		}

	}
}
