//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated from a template.
//
//	 Manual changes to this file may cause unexpected behavior in your application.
//	 Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ServiceModel;
using YumaPos.Shared.Terminal.Infrastructure;
using YumaPos.FrontEnd.Infrastructure.CommandProcessing;

namespace TestWcfClientGenerator
{
	public sealed class ServerRuntimeErrorDecorator : TestWcfClientGenerator.IWcfServiceApi
	{
		private readonly TestWcfClientGenerator.IWcfServiceApi _actor;
		#region Properties
		public ExecutionContext ExecutionContext
		{
			get { return _actor.ExecutionContext; }
			set { _actor.ExecutionContext = value; }
		}
		#endregion
		public ServerRuntimeErrorDecorator(TestWcfClientGenerator.IWcfServiceApi actor)
		{
			if (actor == null) throw new ArgumentNullException(nameof(actor));
			_actor = actor;
		}
		public async System.Threading.Tasks.Task<TestDecoratorGeneration.ResponseDto> AddItem(System.Guid id, string name)
		{
			try
			{
				return await _actor.AddItem(id, name);
			}

			catch (FaultException<ExceptionDetail> ex)
			{
				throw new ServerRuntimeException(ex.Detail.Message, ex.Detail);
			}
			catch (FaultException ex)
			{
				throw new ServerRuntimeException(ex.Message, ex);
			}
			catch (ActionNotSupportedException ex)
			{
				throw new ServerRuntimeException(ex.Message, ex);
			}
			catch (AggregateException ex)
			{
				foreach (var innerException in ex.Flatten().InnerExceptions)
				{
					var e = innerException as FaultException;
					if (e == null) continue;
					var exc = e as FaultException<ExceptionDetail>;
					if (exc?.Detail.InnerException != null)
					{
						throw new ServerRuntimeException(exc.Detail.InnerException.Message, exc.Detail.InnerException);
					}
					throw new ServerRuntimeException(innerException.Message, innerException);
				}
				throw;
			}
		}

		public async System.Threading.Tasks.Task<TestDecoratorGeneration.ItemDto> GetItems()
		{
			try
			{
				return await _actor.GetItems();
			}

			catch (FaultException<ExceptionDetail> ex)
			{
				throw new ServerRuntimeException(ex.Detail.Message, ex.Detail);
			}
			catch (FaultException ex)
			{
				throw new ServerRuntimeException(ex.Message, ex);
			}
			catch (ActionNotSupportedException ex)
			{
				throw new ServerRuntimeException(ex.Message, ex);
			}
			catch (AggregateException ex)
			{
				foreach (var innerException in ex.Flatten().InnerExceptions)
				{
					var e = innerException as FaultException;
					if (e == null) continue;
					var exc = e as FaultException<ExceptionDetail>;
					if (exc?.Detail.InnerException != null)
					{
						throw new ServerRuntimeException(exc.Detail.InnerException.Message, exc.Detail.InnerException);
					}
					throw new ServerRuntimeException(innerException.Message, innerException);
				}
				throw;
			}
		}

	}
}
