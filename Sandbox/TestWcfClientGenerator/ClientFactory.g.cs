//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System; 

using System.Collections.Concurrent; 

using System.ServiceModel; 

namespace TestWcfClientGenerator
{
	 public static class ClientFactory<TClient> where TClient : class, IProperter, IClientBase, new()
 	 { 
		 private static ConcurrentDictionary<string, ConcurrentBag<TClient>> FreeChannelsChannels { get; set; } 
		 private static ConcurrentDictionary<int, ChannelContainer<TClient>> UsedChannels { get; set; } 

		 static ClientFactory() 
		 { 
			 FreeChannelsChannels = new ConcurrentDictionary<string, ConcurrentBag<TClient>>();
			 UsedChannels = new ConcurrentDictionary<int, ChannelContainer<TClient>>();
 		 } 

		 public static ChannelContainer<TClient> CreateClient(string address, BasicHttpBinding binding, EndpointAddress enAddress)
 		 { 
			 ConcurrentBag<TClient> currentChannels = GetFreeChannels(address); 

			 TClient client = null; 

			 for (int i=0; currentChannels.Count > 0  && client == null && i< 10; i++ ) 
 			 { 
				 currentChannels.TryTake(out client); 
 			 } 
			 client = client ?? (TClient)Activator.CreateInstance(typeof(TClient), new object[] {binding, enAddress}); 

			 var container = new ChannelContainer<TClient>(client) { Address = address }; 

			 UsedChannels.TryAdd(container.GetHashCode(), container); 
			 container.Disposing += ContainerOnDisposing; 

			 return container; 
 		 } 

		 public static ConcurrentBag<TClient> GetFreeChannels(string address) 
 		 { 
			 return FreeChannelsChannels.GetOrAdd(address, arg => new ConcurrentBag<TClient>()); 
 		 } 

		 private static void ContainerOnDisposing(object sender, EventArgs eventArgs) 
 		 { 
			 var container = (ChannelContainer<TClient>) sender;
			 container.Disposing -= ContainerOnDisposing; 

			 ChannelContainer<TClient> container2; 
			 UsedChannels.TryRemove(container.GetHashCode(), out container2); 

			 var freeChannels = GetFreeChannels(container.Address); 
			 if(!container.Client.IsCaughtException && freeChannels.Count <= UsedChannels.Count) 
 			 { 
				 freeChannels.Add(container.Client); 
 			 }
 			 else 
 			 { 
 				 ((IDisposable)container.Client).Dispose(); 
 			 }
		 } 
 	 } 
 }