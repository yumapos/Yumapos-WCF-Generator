<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nito.Disposables</name>
    </assembly>
    <members>
        <member name="T:Nito.Disposables.AnonymousDisposable">
            <summary>
            Equivalent to <see cref="T:Nito.Disposables.Disposable"/>.
            </summary>
        </member>
        <member name="M:Nito.Disposables.AnonymousDisposable.#ctor(System.Action)">
            <summary>
            Creates a new disposable that executes <paramref name="dispose"/> when disposed.
            </summary>
            <param name="dispose">The delegate to execute when disposed. If this is <c>null</c>, then this instance does nothing when it is disposed.</param>
        </member>
        <member name="M:Nito.Disposables.AnonymousDisposable.Dispose(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Nito.Disposables.AnonymousDisposable.Add(System.Action)">
            <summary>
            Adds a delegate to be executed when this instance is disposed. If this instance is already disposed or disposing, then <paramref name="dispose"/> is executed immediately.
            If this method is called multiple times concurrently at the same time this instance is disposed, then the different <paramref name="dispose"/> arguments may be disposed concurrently.
            </summary>
            <param name="dispose">The delegate to add. May be <c>null</c> to indicate no additional action.</param>
        </member>
        <member name="M:Nito.Disposables.AnonymousDisposable.Create(System.Action)">
            <summary>
            Creates a new disposable that executes <paramref name="dispose"/> when disposed.
            </summary>
            <param name="dispose">The delegate to execute when disposed. If this is <c>null</c>, then this instance does nothing when it is disposed.</param>
        </member>
        <member name="T:Nito.Disposables.CollectionDisposable">
            <summary>
            Disposes a collection of disposables.
            </summary>
        </member>
        <member name="M:Nito.Disposables.CollectionDisposable.#ctor(System.IDisposable[])">
            <summary>
            Creates a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose. May not be <c>null</c>, but entries may be <c>null</c>.</param>
        </member>
        <member name="M:Nito.Disposables.CollectionDisposable.#ctor(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Creates a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose. May not be <c>null</c>, but entries may be <c>null</c>.</param>
        </member>
        <member name="M:Nito.Disposables.CollectionDisposable.Dispose(System.Collections.Immutable.ImmutableQueue{System.IDisposable})">
            <inheritdoc />
        </member>
        <member name="M:Nito.Disposables.CollectionDisposable.Add(System.IDisposable)">
            <summary>
            Adds a disposable to the collection of disposables. If this instance is already disposed or disposing, then <paramref name="disposable"/> is disposed immediately.
            If this method is called multiple times concurrently at the same time this instance is disposed, then the different <paramref name="disposable"/> arguments may be disposed concurrently.
            </summary>
            <param name="disposable">The disposable to add to our collection. May be <c>null</c>.</param>
        </member>
        <member name="M:Nito.Disposables.CollectionDisposable.Abandon">
            <summary>
            Makes this disposable do nothing when it is disposed. Returns the actions this disposable *would* have taken; these can be passed to a new instance to transfer ownership.
            </summary>
        </member>
        <member name="M:Nito.Disposables.CollectionDisposable.Create(System.IDisposable[])">
            <summary>
            Creates a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose. May not be <c>null</c>, but entries may be <c>null</c>.</param>
        </member>
        <member name="M:Nito.Disposables.CollectionDisposable.Create(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Creates a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose. May not be <c>null</c>, but entries may be <c>null</c>.</param>
        </member>
        <member name="T:Nito.Disposables.Disposable">
            <summary>
            A disposable that executes a delegate when disposed.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Disposable.#ctor(System.Action)">
            <summary>
            Creates a new disposable that executes <paramref name="dispose"/> when disposed.
            </summary>
            <param name="dispose">The delegate to execute when disposed. If this is <c>null</c>, then this instance does nothing when it is disposed.</param>
        </member>
        <member name="M:Nito.Disposables.Disposable.Dispose(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Nito.Disposables.Disposable.Add(System.Action)">
            <summary>
            Adds a delegate to be executed when this instance is disposed. If this instance is already disposed or disposing, then <paramref name="dispose"/> is executed immediately.
            If this method is called multiple times concurrently at the same time this instance is disposed, then the different <paramref name="dispose"/> arguments may be disposed concurrently.
            </summary>
            <param name="dispose">The delegate to add. May be <c>null</c> to indicate no additional action.</param>
        </member>
        <member name="M:Nito.Disposables.Disposable.Abandon">
            <summary>
            Makes this disposable do nothing when it is disposed. Returns the actions this disposable *would* have taken; these can be passed to a new instance to transfer ownership.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Disposable.Create(System.Action)">
            <summary>
            Creates a new disposable that executes <paramref name="dispose"/> when disposed.
            </summary>
            <param name="dispose">The delegate to execute when disposed. If this is <c>null</c>, then this instance does nothing when it is disposed.</param>
        </member>
        <member name="T:Nito.Disposables.Internals.BoundActionField`1">
            <summary>
            A field containing a bound action.
            </summary>
            <typeparam name="T">The type of context for the action.</typeparam>
        </member>
        <member name="M:Nito.Disposables.Internals.BoundActionField`1.#ctor(System.Action{`0},`0)">
            <summary>
            Initializes the field with the specified action and context.
            </summary>
            <param name="action">The action delegate.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Nito.Disposables.Internals.BoundActionField`1.IsEmpty">
            <summary>
            Whether the field is empty.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.BoundActionField`1.TryGetAndUnset">
            <summary>
            Atomically retrieves the bound action from the field and sets the field to <c>null</c>. May return <c>null</c>.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.BoundActionField`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update the context of the bound action stored in the field. Returns <c>false</c> if the field is <c>null</c>.
            </summary>
            <param name="contextUpdater">The function used to update an existing context. This may be called more than once if more than one thread attempts to simultaneously update the context.</param>
        </member>
        <member name="T:Nito.Disposables.Internals.BoundActionField`1.IBoundAction">
            <summary>
            An action delegate bound with its context.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.BoundActionField`1.IBoundAction.Invoke">
            <summary>
            Executes the action. This should only be done after the bound action is retrieved from a field by <see cref="M:Nito.Disposables.Internals.BoundActionField`1.TryGetAndUnset"/>.
            </summary>
        </member>
        <member name="T:Nito.Disposables.Internals.EnumerableExtensions">
            <summary>
            Extension methods for enumerables.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence with the `null` instances removed.
            </summary>
        </member>
        <member name="T:Nito.Disposables.Internals.IReferenceCounter">
            <summary>
            A reference count for an underlying target.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.IReferenceCounter.TryIncrementCount">
            <summary>
            Increments the reference count and returns <c>true</c>. If the reference count has already reached zero, returns <c>false</c>.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.IReferenceCounter.TryDecrementCount">
            <summary>
            Decrements the reference count and returns <c>null</c>. If this call causes the reference count to reach zero, returns the underlying target.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.IReferenceCounter.TryGetTarget">
            <summary>
            Returns the underlying target. Returns <c>null</c> if the reference count has already reached zero.
            </summary>
        </member>
        <member name="T:Nito.Disposables.Internals.ReferenceCountedDisposable`1">
            <summary>
            An instance that represents a reference count.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.ReferenceCountedDisposable`1.#ctor(Nito.Disposables.Internals.IReferenceCounter)">
            <summary>
            Initializes a reference counted disposable that refers to the specified reference count. The specified reference count must have already been incremented for this instance.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.ReferenceCountedDisposable`1.Dispose(Nito.Disposables.Internals.IReferenceCounter)">
            <inheritdoc/>
        </member>
        <member name="T:Nito.Disposables.Internals.ReferenceCounter">
            <summary>
            A reference count for an underlying target.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.ReferenceCounter.#ctor(System.Object)">
            <summary>
            Creates a new reference counter with a reference count of 1 referencing the specified target.
            </summary>
        </member>
        <member name="T:Nito.Disposables.Internals.ReferenceCounterEphemerons">
            <summary>
            The collection of reference counters, stored as ephemerons.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.ReferenceCounterEphemerons.TryGetAndIncrementOrCreate(System.Object)">
            <summary>
            Increments and returns the reference counter for the specified target, creating it if necessary.
            Returns <c>null</c> if the reference counter has already reached 0.
            </summary>
        </member>
        <member name="T:Nito.Disposables.Internals.WeakReferenceCountedDisposable`1">
            <summary>
            An instance that represents an uncounted weak reference.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.WeakReferenceCountedDisposable`1.#ctor(Nito.Disposables.Internals.IReferenceCounter)">
            <summary>
            Creates an instance that weakly references the specified reference counter. The specified reference counter should not be incremented.
            </summary>
        </member>
        <member name="T:Nito.Disposables.IReferenceCountedDisposable`1">
            <summary>
            An instance that represents a reference count. All members are threadsafe.
            </summary>
        </member>
        <member name="M:Nito.Disposables.IReferenceCountedDisposable`1.AddWeakReference">
            <summary>
            Adds a weak reference to this reference counted disposable. Throws <see cref="T:System.ObjectDisposedException"/> if this instance is disposed.
            </summary>
        </member>
        <member name="M:Nito.Disposables.IReferenceCountedDisposable`1.AddReference">
            <summary>
            Returns a new reference to this reference counted disposable, incrementing the reference counter. Throws <see cref="T:System.ObjectDisposedException"/> if this instance is disposed.
            </summary>
        </member>
        <member name="P:Nito.Disposables.IReferenceCountedDisposable`1.Target">
            <summary>
            Gets the target object. Throws <see cref="T:System.ObjectDisposedException"/> if this instance is disposed.
            </summary>
        </member>
        <member name="P:Nito.Disposables.IReferenceCountedDisposable`1.IsDisposeStarted">
            <summary>
            Whether this instance is currently disposing or has been disposed.
            </summary>
        </member>
        <member name="P:Nito.Disposables.IReferenceCountedDisposable`1.IsDisposed">
            <summary>
            Whether this instance is disposed (finished disposing).
            </summary>
        </member>
        <member name="P:Nito.Disposables.IReferenceCountedDisposable`1.IsDisposing">
            <summary>
            Whether this instance is currently disposing, but not finished yet.
            </summary>
        </member>
        <member name="T:Nito.Disposables.IWeakReferenceCountedDisposable`1">
            <summary>
            An instance that represents an uncounted weak reference. All members are threadsafe.
            </summary>
        </member>
        <member name="M:Nito.Disposables.IWeakReferenceCountedDisposable`1.TryAddReference">
            <summary>
            Adds a reference to this reference counted disposable. Returns <c>null</c> if the underlying disposable has already been disposed or garbage collected.
            </summary>
        </member>
        <member name="M:Nito.Disposables.IWeakReferenceCountedDisposable`1.TryGetTarget">
            <summary>
            Attempts to get the target object. Returns <c>null</c> if the underlying disposable has already been disposed or garbage collected.
            </summary>
        </member>
        <member name="T:Nito.Disposables.NoopDisposable">
            <summary>
            A singleton disposable that does nothing when disposed.
            </summary>
        </member>
        <member name="M:Nito.Disposables.NoopDisposable.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="P:Nito.Disposables.NoopDisposable.Instance">
            <summary>
            Gets the instance of <see cref="T:Nito.Disposables.NoopDisposable"/>.
            </summary>
        </member>
        <member name="T:Nito.Disposables.ReferenceCountedDisposable">
            <summary>
            Creation methods for reference counted disposables.
            </summary>
        </member>
        <member name="M:Nito.Disposables.ReferenceCountedDisposable.Create``1(``0)">
            <summary>
            Creates a new disposable that disposes <paramref name="disposable"/> when all reference counts have been disposed. This method uses attached (ephemeron) reference counters.
            </summary>
            <param name="disposable">The disposable to dispose when all references have been disposed. If this is <c>null</c>, then the returned instance does nothing when it is disposed.</param>
        </member>
        <member name="M:Nito.Disposables.ReferenceCountedDisposable.TryCreate``1(``0)">
            <summary>
            Creates a new disposable that disposes <paramref name="disposable"/> when all reference counts have been disposed. This method uses attached (ephemeron) reference counters.
            </summary>
            <param name="disposable">The disposable to dispose when all references have been disposed. If this is <c>null</c>, then the returned instance does nothing when it is disposed.</param>
        </member>
        <member name="M:Nito.Disposables.ReferenceCountedDisposable.CreateWithNewReferenceCounter``1(``0)">
            <summary>
            Creates a new disposable that disposes <paramref name="disposable"/> when all reference counts have been disposed. This method creates a new reference counter to keep track of the reference counts.
            </summary>
            <param name="disposable">The disposable to dispose when all references have been disposed. If this is <c>null</c>, then the returned instance does nothing when it is disposed.</param>
        </member>
        <member name="T:Nito.Disposables.SingleDisposable`1">
            <summary>
            A base class for disposables that need exactly-once semantics in a thread-safe way. All disposals of this instance block until the disposal is complete.
            </summary>
            <typeparam name="T">The type of "context" for the derived disposable. Since the context should not be modified, strongly consider making this an immutable type.</typeparam>
            <remarks>
            <para>If <see cref="M:Nito.Disposables.SingleDisposable`1.Dispose"/> is called multiple times, only the first call will execute the disposal code. Other calls to <see cref="M:Nito.Disposables.SingleDisposable`1.Dispose"/> will wait for the disposal to complete.</para>
            </remarks>
        </member>
        <member name="F:Nito.Disposables.SingleDisposable`1._context">
            <summary>
            The context. This is never <c>null</c>. This is empty if this instance has already been disposed (or is being disposed).
            </summary>
        </member>
        <member name="M:Nito.Disposables.SingleDisposable`1.#ctor(`0)">
            <summary>
            Creates a disposable for the specified context.
            </summary>
            <param name="context">The context passed to <see cref="M:Nito.Disposables.SingleDisposable`1.Dispose(`0)"/>. May be <c>null</c>.</param>
        </member>
        <member name="P:Nito.Disposables.SingleDisposable`1.IsDisposeStarted">
            <summary>
            Whether this instance is currently disposing or has been disposed.
            </summary>
        </member>
        <member name="P:Nito.Disposables.SingleDisposable`1.IsDisposed">
            <summary>
            Whether this instance is disposed (finished disposing).
            </summary>
        </member>
        <member name="P:Nito.Disposables.SingleDisposable`1.IsDisposing">
            <summary>
            Whether this instance is currently disposing, but not finished yet.
            </summary>
        </member>
        <member name="M:Nito.Disposables.SingleDisposable`1.Dispose(`0)">
            <summary>
            The actual disposal method, called only once from <see cref="M:Nito.Disposables.SingleDisposable`1.Dispose"/>.
            </summary>
            <param name="context">The context for the disposal operation.</param>
        </member>
        <member name="M:Nito.Disposables.SingleDisposable`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
            <remarks>
            <para>If <see cref="M:Nito.Disposables.SingleDisposable`1.Dispose"/> is called multiple times, only the first call will execute the disposal code. Other calls to <see cref="M:Nito.Disposables.SingleDisposable`1.Dispose"/> will wait for the disposal to complete.</para>
            </remarks>
        </member>
        <member name="M:Nito.Disposables.SingleDisposable`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update the stored context. This method returns <c>false</c> if this instance has already been disposed (or is being disposed).
            </summary>
            <param name="contextUpdater">The function used to update an existing context. This may be called more than once if more than one thread attempts to simultaneously update the context.</param>
        </member>
        <member name="T:Nito.Disposables.SingleNonblockingDisposable`1">
            <summary>
            A base class for disposables that need exactly-once semantics in a thread-safe way.
            </summary>
            <typeparam name="T">The type of "context" for the derived disposable. Since the context should not be modified, strongly consider making this an immutable type.</typeparam>
            <remarks>
            <para>If <see cref="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose"/> is called multiple times, only the first call will execute the disposal code. Other calls to <see cref="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose"/> will not wait for the disposal to complete.</para>
            </remarks>
        </member>
        <member name="F:Nito.Disposables.SingleNonblockingDisposable`1._context">
            <summary>
            The context. This is never <c>null</c>. This is empty if this instance has already been disposed (or is being disposed).
            </summary>
        </member>
        <member name="M:Nito.Disposables.SingleNonblockingDisposable`1.#ctor(`0)">
            <summary>
            Creates a disposable for the specified context.
            </summary>
            <param name="context">The context passed to <see cref="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose(`0)"/>. May be <c>null</c>.</param>
        </member>
        <member name="P:Nito.Disposables.SingleNonblockingDisposable`1.IsDisposed">
            <summary>
            Whether this instance has been disposed (or is being disposed).
            </summary>
        </member>
        <member name="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose(`0)">
            <summary>
            The actual disposal method, called only once from <see cref="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose"/>.
            </summary>
            <param name="context">The context for the disposal operation.</param>
        </member>
        <member name="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
            <remarks>
            <para>If <see cref="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose"/> is called multiple times, only the first call will execute the disposal code. Other calls to <see cref="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose"/> will not wait for the disposal to complete.</para>
            </remarks>
        </member>
        <member name="M:Nito.Disposables.SingleNonblockingDisposable`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update the stored context. This method returns <c>false</c> if this instance has already been disposed (or is being disposed).
            </summary>
            <param name="contextUpdater">The function used to update an existing context. This may be called more than once if more than one thread attempts to simultaneously update the context.</param>
        </member>
    </members>
</doc>
